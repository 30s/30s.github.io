<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博乐园</title>
  
  <subtitle>Coding bots ...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://30s.github.io/"/>
  <updated>2018-03-06T10:41:27.907Z</updated>
  <id>https://30s.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jdon Framework</title>
    <link href="https://30s.github.io/2017/01/01/06_tech_frame/064_project_case/0641_ddd/jdon/jdon_framework/"/>
    <id>https://30s.github.io/2017/01/01/06_tech_frame/064_project_case/0641_ddd/jdon/jdon_framework/</id>
    <published>2017-01-01T14:51:11.000Z</published>
    <updated>2018-03-06T10:41:27.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开源项目：Jdon-Framework"><a href="#开源项目：Jdon-Framework" class="headerlink" title="开源项目：Jdon Framework"></a>开源项目：<a href="http://www.jdon.com/jdonframework/" target="_blank" rel="noopener">Jdon Framework</a></h1><p><a href="http://www.jdon.com/jdonframework/download.html" target="_blank" rel="noopener">下载</a>      <a href="http://www.jdon.com/jdonframework/manual.htm" target="_blank" rel="noopener">文档</a>       <a href="http://www.jdon.com/jdonframework/app.htm" target="_blank" rel="noopener">演示</a>      <a href="http://en.jdon.com/" target="_blank" rel="noopener">jdon英文</a>       <a href="https://github.com/banq/jdonframework" target="_blank" rel="noopener">Github项目</a></p><blockquote><p>项目新闻：<br>2017-06 增加了类似erLang/akka的Actor并发模型的账户转账测试代码和多核并发测试代码，验证Jdon框架支持无锁并发和内存事务<br>2015-05-06  Jdon框架研发思考<br>2014-01-16 Jdonframework PPT进入SlideShare 2013前Top 1%<br>2013-09-29 6.6.8 CQRS Command/Event异步并发输入输出。</p></blockquote><p>　　Jdon Framework是一个实施DDD+CQRS+EventSourcing架构的Java reactive开源框架，能够快速地将领域驱动设计(DDD)落地为异步、高并发、高吞吐量的Java应用系统 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开源项目：Jdon-Framework&quot;&gt;&lt;a href=&quot;#开源项目：Jdon-Framework&quot; class=&quot;headerlink&quot; title=&quot;开源项目：Jdon Framework&quot;&gt;&lt;/a&gt;开源项目：&lt;a href=&quot;http://www.jdon
      
    
    </summary>
    
      <category term="06_tech_frame" scheme="https://30s.github.io/categories/06-tech-frame/"/>
    
    
      <category term="DDD" scheme="https://30s.github.io/tags/DDD/"/>
    
      <category term="CQRS" scheme="https://30s.github.io/tags/CQRS/"/>
    
      <category term="EventSourcing" scheme="https://30s.github.io/tags/EventSourcing/"/>
    
      <category term="Java Reactive" scheme="https://30s.github.io/tags/Java-Reactive/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析</title>
    <link href="https://30s.github.io/2010/09/01/01_software_engineering/015_algorithm/index/"/>
    <id>https://30s.github.io/2010/09/01/01_software_engineering/015_algorithm/index/</id>
    <published>2010-09-01T12:00:00.000Z</published>
    <updated>2018-03-06T10:40:00.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-算法概述"><a href="#第1章-算法概述" class="headerlink" title="第1章　算法概述"></a>第1章　算法概述</h1><h2 id="1-1-算法与程序"><a href="#1-1-算法与程序" class="headerlink" title="1.1　算法与程序"></a>1.1　算法与程序</h2><h2 id="1-2-算法复杂性分析"><a href="#1-2-算法复杂性分析" class="headerlink" title="1.2　算法复杂性分析"></a>1.2　算法复杂性分析</h2><h1 id="第2章-递归与分治策略"><a href="#第2章-递归与分治策略" class="headerlink" title="第2章　递归与分治策略"></a>第2章　递归与分治策略</h1><h2 id="2-1-递归的概念"><a href="#2-1-递归的概念" class="headerlink" title="2.1　递归的概念"></a>2.1　递归的概念</h2><h2 id="2-2-分治法的基本思想"><a href="#2-2-分治法的基本思想" class="headerlink" title="2.2　分治法的基本思想"></a>2.2　分治法的基本思想</h2><h2 id="2-3-二分搜索技术"><a href="#2-3-二分搜索技术" class="headerlink" title="2.3　二分搜索技术"></a>2.3　二分搜索技术</h2><h2 id="2-4-大整数的乘法"><a href="#2-4-大整数的乘法" class="headerlink" title="2.4　大整数的乘法"></a>2.4　大整数的乘法</h2><h2 id="2-5-Strassen矩阵乘法"><a href="#2-5-Strassen矩阵乘法" class="headerlink" title="2.5　Strassen矩阵乘法"></a>2.5　Strassen矩阵乘法</h2><h2 id="2-6-棋盘覆盖"><a href="#2-6-棋盘覆盖" class="headerlink" title="2.6　棋盘覆盖"></a>2.6　棋盘覆盖</h2><h2 id="2-7-合并排序"><a href="#2-7-合并排序" class="headerlink" title="2.7　合并排序"></a>2.7　合并排序</h2><h2 id="2-8-快速排序"><a href="#2-8-快速排序" class="headerlink" title="2.8　快速排序"></a>2.8　快速排序</h2><h2 id="2-9-线性时间选择"><a href="#2-9-线性时间选择" class="headerlink" title="2.9　线性时间选择"></a>2.9　线性时间选择</h2><h2 id="2-10-最接近点对问题"><a href="#2-10-最接近点对问题" class="headerlink" title="2.10　最接近点对问题"></a>2.10　最接近点对问题</h2><h2 id="2-11-循环赛日程表"><a href="#2-11-循环赛日程表" class="headerlink" title="2.11　循环赛日程表"></a>2.11　循环赛日程表</h2><h1 id="第3章-动态规划"><a href="#第3章-动态规划" class="headerlink" title="第3章　动态规划"></a>第3章　动态规划</h1><h2 id="3-1-矩阵连乘问题"><a href="#3-1-矩阵连乘问题" class="headerlink" title="3.1　矩阵连乘问题"></a>3.1　矩阵连乘问题</h2><h2 id="3-2-动态规划算法的基本要素"><a href="#3-2-动态规划算法的基本要素" class="headerlink" title="3.2　动态规划算法的基本要素"></a>3.2　动态规划算法的基本要素</h2><h2 id="3-3-最长公共子序列"><a href="#3-3-最长公共子序列" class="headerlink" title="3.3　最长公共子序列"></a>3.3　最长公共子序列</h2><h2 id="3-4-最大子段和"><a href="#3-4-最大子段和" class="headerlink" title="3.4　最大子段和"></a>3.4　最大子段和</h2><h2 id="3-5-凸多边形最优三角剖分"><a href="#3-5-凸多边形最优三角剖分" class="headerlink" title="3.5　凸多边形最优三角剖分"></a>3.5　凸多边形最优三角剖分</h2><h2 id="3-6-多边形游戏"><a href="#3-6-多边形游戏" class="headerlink" title="3.6　多边形游戏"></a>3.6　多边形游戏</h2><h2 id="3-7-图像压缩"><a href="#3-7-图像压缩" class="headerlink" title="3.7　图像压缩"></a>3.7　图像压缩</h2><h2 id="3-8-电路布线"><a href="#3-8-电路布线" class="headerlink" title="3.8　电路布线"></a>3.8　电路布线</h2><h2 id="3-9-流水作业调度"><a href="#3-9-流水作业调度" class="headerlink" title="3.9　流水作业调度"></a>3.9　流水作业调度</h2><h2 id="3-10-0-1背包问题"><a href="#3-10-0-1背包问题" class="headerlink" title="3.10　0-1背包问题"></a>3.10　0-1背包问题</h2><h2 id="3-11-最优二叉搜索树"><a href="#3-11-最优二叉搜索树" class="headerlink" title="3.11　最优二叉搜索树"></a>3.11　最优二叉搜索树</h2><h2 id="3-12-动态规划加速原理"><a href="#3-12-动态规划加速原理" class="headerlink" title="3.12　动态规划加速原理"></a>3.12　动态规划加速原理</h2><h1 id="第4章-贪心算法"><a href="#第4章-贪心算法" class="headerlink" title="第4章　贪心算法"></a>第4章　贪心算法</h1><h1 id="第5章-回溯法"><a href="#第5章-回溯法" class="headerlink" title="第5章　回溯法"></a>第5章　回溯法</h1><h1 id="第6章-分支限界法"><a href="#第6章-分支限界法" class="headerlink" title="第6章　分支限界法"></a>第6章　分支限界法</h1><h1 id="第7章-随机化算法"><a href="#第7章-随机化算法" class="headerlink" title="第7章　随机化算法"></a>第7章　随机化算法</h1><h1 id="第8章-线性规划与网络流"><a href="#第8章-线性规划与网络流" class="headerlink" title="第8章　线性规划与网络流"></a>第8章　线性规划与网络流</h1><h1 id="第9章-NP完全性理论与近似算法"><a href="#第9章-NP完全性理论与近似算法" class="headerlink" title="第9章　NP完全性理论与近似算法"></a>第9章　NP完全性理论与近似算法</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-算法概述&quot;&gt;&lt;a href=&quot;#第1章-算法概述&quot; class=&quot;headerlink&quot; title=&quot;第1章　算法概述&quot;&gt;&lt;/a&gt;第1章　算法概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-算法与程序&quot;&gt;&lt;a href=&quot;#1-1-算法与程序&quot; class=&quot;he
      
    
    </summary>
    
      <category term="01_software_engineering" scheme="https://30s.github.io/categories/01-software-engineering/"/>
    
      <category term="015_algorithm" scheme="https://30s.github.io/categories/01-software-engineering/015-algorithm/"/>
    
    
      <category term="Software Engineering" scheme="https://30s.github.io/tags/Software-Engineering/"/>
    
      <category term="Algorithm" scheme="https://30s.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="https://30s.github.io/2010/09/01/01_software_engineering/011_computer_principle/index/"/>
    <id>https://30s.github.io/2010/09/01/01_software_engineering/011_computer_principle/index/</id>
    <published>2010-09-01T12:00:00.000Z</published>
    <updated>2018-03-07T13:37:12.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1篇-概论"><a href="#第1篇-概论" class="headerlink" title="第1篇 概论"></a>第1篇 概论</h1><h2 id="第1章-计算机系统概论"><a href="#第1章-计算机系统概论" class="headerlink" title="第1章 计算机系统概论"></a>第1章 计算机系统概论</h2><h3 id="1-1-计算机系统简介"><a href="#1-1-计算机系统简介" class="headerlink" title="1.1 计算机系统简介"></a>1.1 计算机系统简介</h3><h3 id="1-2-计算机的基本组成"><a href="#1-2-计算机的基本组成" class="headerlink" title="1.2 计算机的基本组成"></a>1.2 计算机的基本组成</h3><p>　　控制器，运算器，存储器，输入设备，输出设备。</p><h3 id="1-3-计算机硬件的主要技术指标"><a href="#1-3-计算机硬件的主要技术指标" class="headerlink" title="1.3 计算机硬件的主要技术指标"></a>1.3 计算机硬件的主要技术指标</h3><p>　　CPU的字长、时钟主频、运算速度、容量与可靠性。</p><h2 id="第2章-计算机的发展及应用"><a href="#第2章-计算机的发展及应用" class="headerlink" title="第2章 计算机的发展及应用"></a>第2章 计算机的发展及应用</h2><h3 id="2-1-计算机的发展史"><a href="#2-1-计算机的发展史" class="headerlink" title="2.1 计算机的发展史"></a>2.1 计算机的发展史</h3><h3 id="2-2-计算机的应用"><a href="#2-2-计算机的应用" class="headerlink" title="2.2 计算机的应用"></a>2.2 计算机的应用</h3><h3 id="2-3-计算机的展望"><a href="#2-3-计算机的展望" class="headerlink" title="2.3 计算机的展望"></a>2.3 计算机的展望</h3><hr><h1 id="第2篇-计算机系统的硬件结构"><a href="#第2篇-计算机系统的硬件结构" class="headerlink" title="第2篇 计算机系统的硬件结构"></a>第2篇 计算机系统的硬件结构</h1><p><img src="https://botlab.oss-cn-shenzhen.aliyuncs.com/blog/img/01_software_engineering/computer_hardware_composite.jpg" alt="计算机系统硬件组成"></p><h2 id="第3章-系统总线"><a href="#第3章-系统总线" class="headerlink" title="第3章 系统总线"></a>第3章 系统总线</h2><h3 id="3-1-总线的基本概念"><a href="#3-1-总线的基本概念" class="headerlink" title="3.1 总线的基本概念"></a>3.1 总线的基本概念</h3><h3 id="3-2-总线的分类"><a href="#3-2-总线的分类" class="headerlink" title="3.2 总线的分类"></a>3.2 总线的分类</h3><h3 id="3-3-总线特性及性能指标"><a href="#3-3-总线特性及性能指标" class="headerlink" title="3.3 总线特性及性能指标"></a>3.3 总线特性及性能指标</h3><h3 id="3-4-总线结构"><a href="#3-4-总线结构" class="headerlink" title="3.4 总线结构"></a>3.4 总线结构</h3><h3 id="3-5-总线控制"><a href="#3-5-总线控制" class="headerlink" title="3.5 总线控制"></a>3.5 总线控制</h3><h2 id="第4章-存储器"><a href="#第4章-存储器" class="headerlink" title="第4章 存储器"></a>第4章 存储器</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><h3 id="4-2-主存储器"><a href="#4-2-主存储器" class="headerlink" title="4.2 主存储器"></a>4.2 主存储器</h3><h3 id="4-3-高速缓冲存储器"><a href="#4-3-高速缓冲存储器" class="headerlink" title="4.3 高速缓冲存储器"></a>4.3 高速缓冲存储器</h3><h3 id="4-4-辅助存储器"><a href="#4-4-辅助存储器" class="headerlink" title="4.4 辅助存储器"></a>4.4 辅助存储器</h3><h2 id="第5章-输入输出系统"><a href="#第5章-输入输出系统" class="headerlink" title="第5章 输入输出系统"></a>第5章 输入输出系统</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><h3 id="5-2-I-O设备"><a href="#5-2-I-O设备" class="headerlink" title="5.2 I/O设备"></a>5.2 I/O设备</h3><h3 id="5-3-I-O接口"><a href="#5-3-I-O接口" class="headerlink" title="5.3 I/O接口"></a>5.3 I/O接口</h3><h3 id="5-4-程序查询方式"><a href="#5-4-程序查询方式" class="headerlink" title="5.4 程序查询方式"></a>5.4 程序查询方式</h3><h3 id="5-5-程序中断方式"><a href="#5-5-程序中断方式" class="headerlink" title="5.5 程序中断方式"></a>5.5 程序中断方式</h3><h3 id="5-6-DMA方式"><a href="#5-6-DMA方式" class="headerlink" title="5.6 DMA方式"></a>5.6 DMA方式</h3><h3 id="附录5A-ASCⅡ码"><a href="#附录5A-ASCⅡ码" class="headerlink" title="附录5A ASCⅡ码"></a>附录5A ASCⅡ码</h3><h3 id="附录5B-BCD码"><a href="#附录5B-BCD码" class="headerlink" title="附录5B BCD码"></a>附录5B BCD码</h3><h3 id="附录5C-奇偶校检码"><a href="#附录5C-奇偶校检码" class="headerlink" title="附录5C 奇偶校检码"></a>附录5C 奇偶校检码</h3><hr><h1 id="第3篇-中央处理器"><a href="#第3篇-中央处理器" class="headerlink" title="第3篇 中央处理器"></a>第3篇 中央处理器</h1><h2 id="第6章-计算机的运算方法"><a href="#第6章-计算机的运算方法" class="headerlink" title="第6章 计算机的运算方法"></a>第6章 计算机的运算方法</h2><h3 id="6-1-无符号数和有符号数"><a href="#6-1-无符号数和有符号数" class="headerlink" title="6.1 无符号数和有符号数"></a>6.1 无符号数和有符号数</h3><h3 id="6-2-数的定点表示和浮点表示"><a href="#6-2-数的定点表示和浮点表示" class="headerlink" title="6.2 数的定点表示和浮点表示"></a>6.2 数的定点表示和浮点表示</h3><h3 id="6-3-定点运算"><a href="#6-3-定点运算" class="headerlink" title="6.3 定点运算"></a>6.3 定点运算</h3><h3 id="6-4-浮点四则运算"><a href="#6-4-浮点四则运算" class="headerlink" title="6.4 浮点四则运算"></a>6.4 浮点四则运算</h3><h3 id="6-5-算术逻辑单元"><a href="#6-5-算术逻辑单元" class="headerlink" title="6.5 算术逻辑单元"></a>6.5 算术逻辑单元</h3><h3 id="附录6A-各种进位制"><a href="#附录6A-各种进位制" class="headerlink" title="附录6A 各种进位制"></a>附录6A 各种进位制</h3><h3 id="附录6B-阵列乘法器和阵列除法器"><a href="#附录6B-阵列乘法器和阵列除法器" class="headerlink" title="附录6B 阵列乘法器和阵列除法器"></a>附录6B 阵列乘法器和阵列除法器</h3><h3 id="附录6C-7418l逻辑电路"><a href="#附录6C-7418l逻辑电路" class="headerlink" title="附录6C 7418l逻辑电路"></a>附录6C 7418l逻辑电路</h3><h2 id="第7章-指令系统"><a href="#第7章-指令系统" class="headerlink" title="第7章 指令系统"></a>第7章 指令系统</h2><h3 id="7-1-机器指令"><a href="#7-1-机器指令" class="headerlink" title="7.1 机器指令"></a>7.1 机器指令</h3><h3 id="7-2-操作数类型和操作类型"><a href="#7-2-操作数类型和操作类型" class="headerlink" title="7.2 操作数类型和操作类型"></a>7.2 操作数类型和操作类型</h3><h3 id="7-3-寻址方式"><a href="#7-3-寻址方式" class="headerlink" title="7.3 寻址方式"></a>7.3 寻址方式</h3><h3 id="7-4-指令格式举例"><a href="#7-4-指令格式举例" class="headerlink" title="7.4 指令格式举例"></a>7.4 指令格式举例</h3><h3 id="7-5-RISC技术"><a href="#7-5-RISC技术" class="headerlink" title="7.5 RISC技术"></a>7.5 RISC技术</h3><h2 id="第8章-CPU的结构和功能"><a href="#第8章-CPU的结构和功能" class="headerlink" title="第8章 CPU的结构和功能"></a>第8章 CPU的结构和功能</h2><h3 id="8-1-CPU的结构"><a href="#8-1-CPU的结构" class="headerlink" title="8.1 CPU的结构"></a>8.1 CPU的结构</h3><h3 id="8-2-指令周期"><a href="#8-2-指令周期" class="headerlink" title="8.2 指令周期"></a>8.2 指令周期</h3><h3 id="8-3-指令流水"><a href="#8-3-指令流水" class="headerlink" title="8.3 指令流水"></a>8.3 指令流水</h3><h3 id="8-4-中断系统"><a href="#8-4-中断系统" class="headerlink" title="8.4 中断系统"></a>8.4 中断系统</h3><hr><h1 id="第4篇-控制单元"><a href="#第4篇-控制单元" class="headerlink" title="第4篇 控制单元"></a>第4篇 控制单元</h1><h2 id="第9章-控制单元的功能"><a href="#第9章-控制单元的功能" class="headerlink" title="第9章 控制单元的功能"></a>第9章 控制单元的功能</h2><h3 id="9-1-微操作命令的分析"><a href="#9-1-微操作命令的分析" class="headerlink" title="9.1 微操作命令的分析"></a>9.1 微操作命令的分析</h3><h3 id="9-2-控制单元的功能"><a href="#9-2-控制单元的功能" class="headerlink" title="9.2 控制单元的功能"></a>9.2 控制单元的功能</h3><h2 id="第10章-控制单元的设计"><a href="#第10章-控制单元的设计" class="headerlink" title="第10章 控制单元的设计"></a>第10章 控制单元的设计</h2><h3 id="10-1-组合逻辑设计"><a href="#10-1-组合逻辑设计" class="headerlink" title="10.1 组合逻辑设计"></a>10.1 组合逻辑设计</h3><h3 id="10-2-微程序设计"><a href="#10-2-微程序设计" class="headerlink" title="10.2 微程序设计"></a>10.2 微程序设计</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1篇-概论&quot;&gt;&lt;a href=&quot;#第1篇-概论&quot; class=&quot;headerlink&quot; title=&quot;第1篇 概论&quot;&gt;&lt;/a&gt;第1篇 概论&lt;/h1&gt;&lt;h2 id=&quot;第1章-计算机系统概论&quot;&gt;&lt;a href=&quot;#第1章-计算机系统概论&quot; class=&quot;header
      
    
    </summary>
    
      <category term="01_software_engineering" scheme="https://30s.github.io/categories/01-software-engineering/"/>
    
      <category term="011_computer_principle" scheme="https://30s.github.io/categories/01-software-engineering/011-computer-principle/"/>
    
    
      <category term="Software Engineering" scheme="https://30s.github.io/tags/Software-Engineering/"/>
    
      <category term="Computer Principle" scheme="https://30s.github.io/tags/Computer-Principle/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://30s.github.io/2010/09/01/01_software_engineering/012_operating_system/index/"/>
    <id>https://30s.github.io/2010/09/01/01_software_engineering/012_operating_system/index/</id>
    <published>2010-09-01T12:00:00.000Z</published>
    <updated>2018-03-06T10:37:56.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><h2 id="1-1-操作系统的目标和作用"><a href="#1-1-操作系统的目标和作用" class="headerlink" title="1.1 操作系统的目标和作用"></a>1.1 操作系统的目标和作用</h2><h2 id="1-2-操作系统的发展过程"><a href="#1-2-操作系统的发展过程" class="headerlink" title="1.2 操作系统的发展过程"></a>1.2 操作系统的发展过程</h2><h2 id="1-3-操作系统的基本特性"><a href="#1-3-操作系统的基本特性" class="headerlink" title="1.3 操作系统的基本特性"></a>1.3 操作系统的基本特性</h2><h2 id="1-4-操作系统的主要功能"><a href="#1-4-操作系统的主要功能" class="headerlink" title="1.4 操作系统的主要功能"></a>1.4 操作系统的主要功能</h2><h2 id="1-5-OS结构设计"><a href="#1-5-OS结构设计" class="headerlink" title="1.5 OS结构设计"></a>1.5 OS结构设计</h2><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><h2 id="2-1-进程的基本概念"><a href="#2-1-进程的基本概念" class="headerlink" title="2.1 进程的基本概念"></a>2.1 进程的基本概念</h2><h2 id="2-2-进程控制"><a href="#2-2-进程控制" class="headerlink" title="2.2 进程控制"></a>2.2 进程控制</h2><h2 id="2-3-进程同步"><a href="#2-3-进程同步" class="headerlink" title="2.3 进程同步"></a>2.3 进程同步</h2><h2 id="2-4-经典进程的同步问题"><a href="#2-4-经典进程的同步问题" class="headerlink" title="2.4 经典进程的同步问题"></a>2.4 经典进程的同步问题</h2><h2 id="2-5-进程通信"><a href="#2-5-进程通信" class="headerlink" title="2.5 进程通信"></a>2.5 进程通信</h2><h2 id="2-6-线程"><a href="#2-6-线程" class="headerlink" title="2.6 线程"></a>2.6 线程</h2><h1 id="第三章-处理机调度与死锁"><a href="#第三章-处理机调度与死锁" class="headerlink" title="第三章 处理机调度与死锁"></a>第三章 处理机调度与死锁</h1><h2 id="3-1-处理机调度的层次"><a href="#3-1-处理机调度的层次" class="headerlink" title="3.1 处理机调度的层次"></a>3.1 处理机调度的层次</h2><h2 id="3-2-调度队列模型和调度准则"><a href="#3-2-调度队列模型和调度准则" class="headerlink" title="3.2 调度队列模型和调度准则"></a>3.2 调度队列模型和调度准则</h2><h2 id="3-3-调度算法"><a href="#3-3-调度算法" class="headerlink" title="3.3 调度算法"></a>3.3 调度算法</h2><h2 id="3-4-实时调度"><a href="#3-4-实时调度" class="headerlink" title="3.4 实时调度"></a>3.4 实时调度</h2><h2 id="3-5-产生死锁的原因和必要条件"><a href="#3-5-产生死锁的原因和必要条件" class="headerlink" title="3.5 产生死锁的原因和必要条件"></a>3.5 产生死锁的原因和必要条件</h2><h2 id="3-6-预防死锁的方法"><a href="#3-6-预防死锁的方法" class="headerlink" title="3.6 预防死锁的方法"></a>3.6 预防死锁的方法</h2><h2 id="3-7-死锁的检测与解除"><a href="#3-7-死锁的检测与解除" class="headerlink" title="3.7 死锁的检测与解除"></a>3.7 死锁的检测与解除</h2><h1 id="第四章-存储器管理"><a href="#第四章-存储器管理" class="headerlink" title="第四章 存储器管理"></a>第四章 存储器管理</h1><h2 id="4-1-存储器的层次结构"><a href="#4-1-存储器的层次结构" class="headerlink" title="4.1 存储器的层次结构"></a>4.1 存储器的层次结构</h2><h2 id="4-2-程序的装入和链接"><a href="#4-2-程序的装入和链接" class="headerlink" title="4.2 程序的装入和链接"></a>4.2 程序的装入和链接</h2><h2 id="4-3-连续分配方式"><a href="#4-3-连续分配方式" class="headerlink" title="4.3 连续分配方式"></a>4.3 连续分配方式</h2><h2 id="4-4-基本分页存储管理方式"><a href="#4-4-基本分页存储管理方式" class="headerlink" title="4.4 基本分页存储管理方式"></a>4.4 基本分页存储管理方式</h2><h2 id="4-5-基本分段存储管理方式"><a href="#4-5-基本分段存储管理方式" class="headerlink" title="4.5 基本分段存储管理方式"></a>4.5 基本分段存储管理方式</h2><h2 id="4-6-虚拟存储器的基本概念"><a href="#4-6-虚拟存储器的基本概念" class="headerlink" title="4.6 虚拟存储器的基本概念"></a>4.6 虚拟存储器的基本概念</h2><h2 id="4-7-请求分页存储管理方式"><a href="#4-7-请求分页存储管理方式" class="headerlink" title="4.7 请求分页存储管理方式"></a>4.7 请求分页存储管理方式</h2><h2 id="4-8-页面置换算法"><a href="#4-8-页面置换算法" class="headerlink" title="4.8 页面置换算法"></a>4.8 页面置换算法</h2><h2 id="4-9-请求分段存储管理方式"><a href="#4-9-请求分段存储管理方式" class="headerlink" title="4.9 请求分段存储管理方式"></a>4.9 请求分段存储管理方式</h2><h1 id="第五章-设备管理"><a href="#第五章-设备管理" class="headerlink" title="第五章 设备管理"></a>第五章 设备管理</h1><h2 id="5-1-I-O系统"><a href="#5-1-I-O系统" class="headerlink" title="5.1 I/O系统"></a>5.1 I/O系统</h2><h2 id="5-2-I-0控制方式"><a href="#5-2-I-0控制方式" class="headerlink" title="5.2 I/0控制方式"></a>5.2 I/0控制方式</h2><h2 id="5-3-缓冲管理"><a href="#5-3-缓冲管理" class="headerlink" title="5.3 缓冲管理"></a>5.3 缓冲管理</h2><h2 id="5-4-I-O软件"><a href="#5-4-I-O软件" class="headerlink" title="5.4 I/O软件"></a>5.4 I/O软件</h2><h2 id="5-5-设备分配"><a href="#5-5-设备分配" class="headerlink" title="5.5 设备分配"></a>5.5 设备分配</h2><h2 id="5-6-磁盘存储器的管理"><a href="#5-6-磁盘存储器的管理" class="headerlink" title="5.6 磁盘存储器的管理"></a>5.6 磁盘存储器的管理</h2><h1 id="第六章-文件管理"><a href="#第六章-文件管理" class="headerlink" title="第六章 文件管理"></a>第六章 文件管理</h1><h2 id="6-1-文件和文件系统"><a href="#6-1-文件和文件系统" class="headerlink" title="6.1 文件和文件系统"></a>6.1 文件和文件系统</h2><h2 id="6-2-文件的逻辑结构"><a href="#6-2-文件的逻辑结构" class="headerlink" title="6.2 文件的逻辑结构"></a>6.2 文件的逻辑结构</h2><h2 id="6-3-外存分配方式"><a href="#6-3-外存分配方式" class="headerlink" title="6.3 外存分配方式"></a>6.3 外存分配方式</h2><h2 id="6-4-目录管理"><a href="#6-4-目录管理" class="headerlink" title="6.4 目录管理"></a>6.4 目录管理</h2><h2 id="6-5-文件存储空间的管理"><a href="#6-5-文件存储空间的管理" class="headerlink" title="6.5 文件存储空间的管理"></a>6.5 文件存储空间的管理</h2><h2 id="6-6-文件共享与文件保护"><a href="#6-6-文件共享与文件保护" class="headerlink" title="6.6 文件共享与文件保护"></a>6.6 文件共享与文件保护</h2><h2 id="6-7-数据一致性控制"><a href="#6-7-数据一致性控制" class="headerlink" title="6.7 数据一致性控制"></a>6.7 数据一致性控制</h2><h1 id="第七章-操作系统接口"><a href="#第七章-操作系统接口" class="headerlink" title="第七章 操作系统接口"></a>第七章 操作系统接口</h1><h2 id="7-1-联机用户接口"><a href="#7-1-联机用户接口" class="headerlink" title="7.1 联机用户接口"></a>7.1 联机用户接口</h2><h2 id="7-2-Shell命令语言"><a href="#7-2-Shell命令语言" class="headerlink" title="7.2 Shell命令语言"></a>7.2 Shell命令语言</h2><h2 id="7-3-系统调用"><a href="#7-3-系统调用" class="headerlink" title="7.3 系统调用"></a>7.3 系统调用</h2><h2 id="7-4-UNIX系统调用"><a href="#7-4-UNIX系统调用" class="headerlink" title="7.4 UNIX系统调用"></a>7.4 UNIX系统调用</h2><h2 id="7-5-图形用户接口"><a href="#7-5-图形用户接口" class="headerlink" title="7.5 图形用户接口"></a>7.5 图形用户接口</h2><h1 id="第八章-网络操作系统"><a href="#第八章-网络操作系统" class="headerlink" title="第八章 网络操作系统"></a>第八章 网络操作系统</h1><h2 id="8-1-计算机网络概述"><a href="#8-1-计算机网络概述" class="headerlink" title="8.1 计算机网络概述"></a>8.1 计算机网络概述</h2><h2 id="8-2-网络体系结构"><a href="#8-2-网络体系结构" class="headerlink" title="8.2 网络体系结构"></a>8.2 网络体系结构</h2><h2 id="8-3-Internet与Intranet"><a href="#8-3-Internet与Intranet" class="headerlink" title="8.3 Internet与Intranet"></a>8.3 Internet与Intranet</h2><h2 id="8-4-客户，服务器模式"><a href="#8-4-客户，服务器模式" class="headerlink" title="8.4 客户，服务器模式"></a>8.4 客户，服务器模式</h2><h2 id="8-5-网络操作系统的功能"><a href="#8-5-网络操作系统的功能" class="headerlink" title="8.5 网络操作系统的功能"></a>8.5 网络操作系统的功能</h2><h2 id="8-6-网络操作系统提供的服务"><a href="#8-6-网络操作系统提供的服务" class="headerlink" title="8.6 网络操作系统提供的服务"></a>8.6 网络操作系统提供的服务</h2><h1 id="第九章-系统安全性"><a href="#第九章-系统安全性" class="headerlink" title="第九章 系统安全性"></a>第九章 系统安全性</h1><h2 id="9-1-系统安全的基本概念"><a href="#9-1-系统安全的基本概念" class="headerlink" title="9.1 系统安全的基本概念"></a>9.1 系统安全的基本概念</h2><h2 id="9-2-数据加密技术"><a href="#9-2-数据加密技术" class="headerlink" title="9.2 数据加密技术"></a>9.2 数据加密技术</h2><h2 id="9-3-认证技术"><a href="#9-3-认证技术" class="headerlink" title="9.3 认证技术"></a>9.3 认证技术</h2><h2 id="9-4-访问控制技术"><a href="#9-4-访问控制技术" class="headerlink" title="9.4 访问控制技术"></a>9.4 访问控制技术</h2><h2 id="9-5-计算机病毒"><a href="#9-5-计算机病毒" class="headerlink" title="9.5 计算机病毒"></a>9.5 计算机病毒</h2><h1 id="第十章-UNIX系统内核结构"><a href="#第十章-UNIX系统内核结构" class="headerlink" title="第十章 UNIX系统内核结构"></a>第十章 UNIX系统内核结构</h1><h2 id="10-1-UNIX系统概述"><a href="#10-1-UNIX系统概述" class="headerlink" title="10.1 UNIX系统概述"></a>10.1 UNIX系统概述</h2><h2 id="10-2-进程的描述和控制"><a href="#10-2-进程的描述和控制" class="headerlink" title="10.2 进程的描述和控制"></a>10.2 进程的描述和控制</h2><h2 id="10-3-进程的同步与通信"><a href="#10-3-进程的同步与通信" class="headerlink" title="10.3 进程的同步与通信"></a>10.3 进程的同步与通信</h2><h2 id="10-4-存储器管理"><a href="#10-4-存储器管理" class="headerlink" title="10.4 存储器管理"></a>10.4 存储器管理</h2><h2 id="10-5-设备管理"><a href="#10-5-设备管理" class="headerlink" title="10.5 设备管理"></a>10.5 设备管理</h2><h2 id="10-6-文件管理"><a href="#10-6-文件管理" class="headerlink" title="10.6 文件管理"></a>10.6 文件管理</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-操作系统引论&quot;&gt;&lt;a href=&quot;#第一章-操作系统引论&quot; class=&quot;headerlink&quot; title=&quot;第一章 操作系统引论&quot;&gt;&lt;/a&gt;第一章 操作系统引论&lt;/h1&gt;&lt;h2 id=&quot;1-1-操作系统的目标和作用&quot;&gt;&lt;a href=&quot;#1-1-操作系
      
    
    </summary>
    
      <category term="01_software_engineering" scheme="https://30s.github.io/categories/01-software-engineering/"/>
    
      <category term="012_operating_system" scheme="https://30s.github.io/categories/01-software-engineering/012-operating-system/"/>
    
    
      <category term="Software Engineering" scheme="https://30s.github.io/tags/Software-Engineering/"/>
    
      <category term="Operating System" scheme="https://30s.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://30s.github.io/2010/09/01/01_software_engineering/013_network/index/"/>
    <id>https://30s.github.io/2010/09/01/01_software_engineering/013_network/index/</id>
    <published>2010-09-01T12:00:00.000Z</published>
    <updated>2018-03-07T13:38:38.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章　概述"></a>第1章　概述</h1><h1 id="第2章-物理层"><a href="#第2章-物理层" class="headerlink" title="第2章　物理层"></a>第2章　物理层</h1><h1 id="第3章-数据链路层"><a href="#第3章-数据链路层" class="headerlink" title="第3章　数据链路层"></a>第3章　数据链路层</h1><h1 id="第4章-网络层"><a href="#第4章-网络层" class="headerlink" title="第4章　网络层"></a>第4章　网络层</h1><h1 id="第5章-运输层"><a href="#第5章-运输层" class="headerlink" title="第5章　运输层"></a>第5章　运输层</h1><h1 id="第6章-应用层"><a href="#第6章-应用层" class="headerlink" title="第6章　应用层"></a>第6章　应用层</h1><h1 id="第7章-网络安全"><a href="#第7章-网络安全" class="headerlink" title="第7章　网络安全"></a>第7章　网络安全</h1><h1 id="第8章-因特网上的音频-视频服务"><a href="#第8章-因特网上的音频-视频服务" class="headerlink" title="第8章　因特网上的音频/视频服务"></a>第8章　因特网上的音频/视频服务</h1><h1 id="第9章-无线网络"><a href="#第9章-无线网络" class="headerlink" title="第9章　无线网络"></a>第9章　无线网络</h1><h1 id="第10章-下一代因特网"><a href="#第10章-下一代因特网" class="headerlink" title="第10章　下一代因特网"></a>第10章　下一代因特网</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-概述&quot;&gt;&lt;a href=&quot;#第1章-概述&quot; class=&quot;headerlink&quot; title=&quot;第1章　概述&quot;&gt;&lt;/a&gt;第1章　概述&lt;/h1&gt;&lt;h1 id=&quot;第2章-物理层&quot;&gt;&lt;a href=&quot;#第2章-物理层&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="01_software_engineering" scheme="https://30s.github.io/categories/01-software-engineering/"/>
    
      <category term="013_network" scheme="https://30s.github.io/categories/01-software-engineering/013-network/"/>
    
    
      <category term="Software Engineering" scheme="https://30s.github.io/tags/Software-Engineering/"/>
    
      <category term="Network" scheme="https://30s.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://30s.github.io/2010/09/01/01_software_engineering/014_data_structure/index/"/>
    <id>https://30s.github.io/2010/09/01/01_software_engineering/014_data_structure/index/</id>
    <published>2010-09-01T12:00:00.000Z</published>
    <updated>2018-03-06T10:37:56.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h1><h2 id="1-1-什么是数据结构"><a href="#1-1-什么是数据结构" class="headerlink" title="1.1 什么是数据结构"></a>1.1 什么是数据结构</h2><h2 id="1-2-基本概念和术语"><a href="#1-2-基本概念和术语" class="headerlink" title="1.2 基本概念和术语"></a>1.2 基本概念和术语</h2><h2 id="1-3-抽象数据类型的表现与实现"><a href="#1-3-抽象数据类型的表现与实现" class="headerlink" title="1.3 抽象数据类型的表现与实现"></a>1.3 抽象数据类型的表现与实现</h2><h2 id="1-4-算法和算法分析"><a href="#1-4-算法和算法分析" class="headerlink" title="1.4 算法和算法分析"></a>1.4 算法和算法分析</h2><h1 id="第2章-线性表"><a href="#第2章-线性表" class="headerlink" title="第2章 线性表"></a>第2章 线性表</h1><h2 id="2-1-线性表的类型定义"><a href="#2-1-线性表的类型定义" class="headerlink" title="2.1 线性表的类型定义"></a>2.1 线性表的类型定义</h2><h2 id="2-2-线性表的顺序表示和实现"><a href="#2-2-线性表的顺序表示和实现" class="headerlink" title="2.2 线性表的顺序表示和实现"></a>2.2 线性表的顺序表示和实现</h2><h2 id="2-3-线性表的链式表示和实现"><a href="#2-3-线性表的链式表示和实现" class="headerlink" title="2.3 线性表的链式表示和实现"></a>2.3 线性表的链式表示和实现</h2><h2 id="2-4-一元多项式的表示及相加"><a href="#2-4-一元多项式的表示及相加" class="headerlink" title="2.4 一元多项式的表示及相加"></a>2.4 一元多项式的表示及相加</h2><h1 id="第3章-栈和队列"><a href="#第3章-栈和队列" class="headerlink" title="第3章 栈和队列"></a>第3章 栈和队列</h1><h2 id="3-1-栈"><a href="#3-1-栈" class="headerlink" title="3.1 栈"></a>3.1 栈</h2><h2 id="3-2-栈的应有和举例"><a href="#3-2-栈的应有和举例" class="headerlink" title="3.2 栈的应有和举例"></a>3.2 栈的应有和举例</h2><h2 id="3-3-栈与递归的实现"><a href="#3-3-栈与递归的实现" class="headerlink" title="3.3 栈与递归的实现"></a>3.3 栈与递归的实现</h2><h2 id="3-4-队列"><a href="#3-4-队列" class="headerlink" title="3.4 队列"></a>3.4 队列</h2><h2 id="3-5-离散事件模拟"><a href="#3-5-离散事件模拟" class="headerlink" title="3.5 离散事件模拟"></a>3.5 离散事件模拟</h2><h1 id="第4章-串"><a href="#第4章-串" class="headerlink" title="第4章 串"></a>第4章 串</h1><h2 id="4-1-串类型的定义"><a href="#4-1-串类型的定义" class="headerlink" title="4.1 串类型的定义"></a>4.1 串类型的定义</h2><h2 id="4-2-串的表示和实现"><a href="#4-2-串的表示和实现" class="headerlink" title="4.2 串的表示和实现"></a>4.2 串的表示和实现</h2><h2 id="4-3-串的模式匹配算法"><a href="#4-3-串的模式匹配算法" class="headerlink" title="4.3 串的模式匹配算法"></a>4.3 串的模式匹配算法</h2><h2 id="4-4-串操作应用举例"><a href="#4-4-串操作应用举例" class="headerlink" title="4.4 串操作应用举例"></a>4.4 串操作应用举例</h2><h1 id="第5章-数组和广义表"><a href="#第5章-数组和广义表" class="headerlink" title="第5章 数组和广义表"></a>第5章 数组和广义表</h1><h2 id="5-1-数组的定义"><a href="#5-1-数组的定义" class="headerlink" title="5.1 数组的定义"></a>5.1 数组的定义</h2><h2 id="5-2-数组的顺序表现和实现"><a href="#5-2-数组的顺序表现和实现" class="headerlink" title="5.2 数组的顺序表现和实现"></a>5.2 数组的顺序表现和实现</h2><h2 id="5-3-矩阵的压缩存储"><a href="#5-3-矩阵的压缩存储" class="headerlink" title="5.3 矩阵的压缩存储"></a>5.3 矩阵的压缩存储</h2><h2 id="5-4-广义表的定义"><a href="#5-4-广义表的定义" class="headerlink" title="5.4 广义表的定义"></a>5.4 广义表的定义</h2><h2 id="5-5-广义表的储存结构"><a href="#5-5-广义表的储存结构" class="headerlink" title="5.5 广义表的储存结构"></a>5.5 广义表的储存结构</h2><h2 id="5-6-m元多项式的表示"><a href="#5-6-m元多项式的表示" class="headerlink" title="5.6 m元多项式的表示"></a>5.6 m元多项式的表示</h2><h2 id="5-7-广义表的递归算法"><a href="#5-7-广义表的递归算法" class="headerlink" title="5.7 广义表的递归算法"></a>5.7 广义表的递归算法</h2><h1 id="第6章-树和二叉树"><a href="#第6章-树和二叉树" class="headerlink" title="第6章 树和二叉树"></a>第6章 树和二叉树</h1><h2 id="6-1-树的定义和基本术语"><a href="#6-1-树的定义和基本术语" class="headerlink" title="6.1 树的定义和基本术语"></a>6.1 树的定义和基本术语</h2><h2 id="6-2-二叉树"><a href="#6-2-二叉树" class="headerlink" title="6.2 二叉树"></a>6.2 二叉树</h2><h3 id="6-2-1-二叉树的定义"><a href="#6-2-1-二叉树的定义" class="headerlink" title="6.2.1 二叉树的定义"></a>6.2.1 二叉树的定义</h3><h3 id="6-2-2-二叉树的性质"><a href="#6-2-2-二叉树的性质" class="headerlink" title="6.2.2 二叉树的性质"></a>6.2.2 二叉树的性质</h3><h3 id="6-2-3-二叉树的存储结构"><a href="#6-2-3-二叉树的存储结构" class="headerlink" title="6.2.3 二叉树的存储结构"></a>6.2.3 二叉树的存储结构</h3><h2 id="6-3-遍历二叉树和线索二叉树"><a href="#6-3-遍历二叉树和线索二叉树" class="headerlink" title="6.3 遍历二叉树和线索二叉树"></a>6.3 遍历二叉树和线索二叉树</h2><h3 id="6-3-1-遍历二叉树"><a href="#6-3-1-遍历二叉树" class="headerlink" title="6.3.1 遍历二叉树"></a>6.3.1 遍历二叉树</h3><h3 id="6-3-2-线索二叉树"><a href="#6-3-2-线索二叉树" class="headerlink" title="6.3.2 线索二叉树"></a>6.3.2 线索二叉树</h3><h2 id="6-4-树和森林"><a href="#6-4-树和森林" class="headerlink" title="6.4 树和森林"></a>6.4 树和森林</h2><h3 id="6-4-1-树的存储结构"><a href="#6-4-1-树的存储结构" class="headerlink" title="6.4.1 树的存储结构"></a>6.4.1 树的存储结构</h3><h3 id="6-4-2-森林与二叉树的转换"><a href="#6-4-2-森林与二叉树的转换" class="headerlink" title="6.4.2 森林与二叉树的转换"></a>6.4.2 森林与二叉树的转换</h3><h3 id="6-4-3-树和森林的遍历"><a href="#6-4-3-树和森林的遍历" class="headerlink" title="6.4.3 树和森林的遍历"></a>6.4.3 树和森林的遍历</h3><h2 id="6-5-树与等价问题"><a href="#6-5-树与等价问题" class="headerlink" title="6.5 树与等价问题"></a>6.5 树与等价问题</h2><h2 id="6-6-赫夫曼树及其应用"><a href="#6-6-赫夫曼树及其应用" class="headerlink" title="6.6 赫夫曼树及其应用"></a>6.6 赫夫曼树及其应用</h2><h3 id="6-6-1-最优二叉树-赫夫曼树"><a href="#6-6-1-最优二叉树-赫夫曼树" class="headerlink" title="### 6.6.1 最优二叉树(赫夫曼树)"></a>### 6.6.1 最优二叉树(赫夫曼树)</h3><h3 id="6-6-2-赫夫曼编码"><a href="#6-6-2-赫夫曼编码" class="headerlink" title="6.6.2 赫夫曼编码"></a>6.6.2 赫夫曼编码</h3><h2 id="6-7-回溯法与树的遍历"><a href="#6-7-回溯法与树的遍历" class="headerlink" title="6.7 回溯法与树的遍历"></a>6.7 回溯法与树的遍历</h2><h2 id="6-8-树的计数"><a href="#6-8-树的计数" class="headerlink" title="6.8 树的计数"></a>6.8 树的计数</h2><h1 id="第7章-图"><a href="#第7章-图" class="headerlink" title="第7章 图"></a>第7章 图</h1><h2 id="7-1-图的定义和术语"><a href="#7-1-图的定义和术语" class="headerlink" title="7.1 图的定义和术语"></a>7.1 图的定义和术语</h2><h2 id="7-2-图的存储结构"><a href="#7-2-图的存储结构" class="headerlink" title="7.2 图的存储结构"></a>7.2 图的存储结构</h2><h3 id="7-2-1-数组表示法"><a href="#7-2-1-数组表示法" class="headerlink" title="7.2.1 数组表示法"></a>7.2.1 数组表示法</h3><h3 id="7-2-2-邻接表"><a href="#7-2-2-邻接表" class="headerlink" title="7.2.2 邻接表"></a>7.2.2 邻接表</h3><h3 id="7-2-3-十字链表"><a href="#7-2-3-十字链表" class="headerlink" title="7.2.3 十字链表"></a>7.2.3 十字链表</h3><h3 id="7-2-4-邻接多重表"><a href="#7-2-4-邻接多重表" class="headerlink" title="7.2.4 邻接多重表"></a>7.2.4 邻接多重表</h3><h2 id="7-3-图的遍历"><a href="#7-3-图的遍历" class="headerlink" title="7.3 图的遍历"></a>7.3 图的遍历</h2><h3 id="7-3-1-深度优先搜索"><a href="#7-3-1-深度优先搜索" class="headerlink" title="7.3.1 深度优先搜索"></a>7.3.1 深度优先搜索</h3><h3 id="7-3-2-广度优先搜索"><a href="#7-3-2-广度优先搜索" class="headerlink" title="7.3.2 广度优先搜索"></a>7.3.2 广度优先搜索</h3><h2 id="7-4-图的连通性问题"><a href="#7-4-图的连通性问题" class="headerlink" title="7.4 图的连通性问题"></a>7.4 图的连通性问题</h2><h3 id="7-4-1-无向图的连通分量和生成树"><a href="#7-4-1-无向图的连通分量和生成树" class="headerlink" title="7.4.1 无向图的连通分量和生成树"></a>7.4.1 无向图的连通分量和生成树</h3><h3 id="7-4-2-有向图的强连通分量"><a href="#7-4-2-有向图的强连通分量" class="headerlink" title="7.4.2 有向图的强连通分量"></a>7.4.2 有向图的强连通分量</h3><h3 id="7-4-3-最小生成树"><a href="#7-4-3-最小生成树" class="headerlink" title="7.4.3 最小生成树"></a>7.4.3 最小生成树</h3><h3 id="7-4-4-关节点和重连通分量"><a href="#7-4-4-关节点和重连通分量" class="headerlink" title="7.4.4 关节点和重连通分量"></a>7.4.4 关节点和重连通分量</h3><h2 id="7-5-有向无环图及其应用"><a href="#7-5-有向无环图及其应用" class="headerlink" title="7.5 有向无环图及其应用"></a>7.5 有向无环图及其应用</h2><h3 id="7-5-1-拓扑排序"><a href="#7-5-1-拓扑排序" class="headerlink" title="7.5.1 拓扑排序"></a>7.5.1 拓扑排序</h3><h3 id="7-5-2-关键路径"><a href="#7-5-2-关键路径" class="headerlink" title="7.5.2 关键路径"></a>7.5.2 关键路径</h3><h2 id="7-6-最短路径"><a href="#7-6-最短路径" class="headerlink" title="7.6 最短路径"></a>7.6 最短路径</h2><h3 id="7-6-1-从某个源点到其余各顶点的最短路径"><a href="#7-6-1-从某个源点到其余各顶点的最短路径" class="headerlink" title="7.6.1 从某个源点到其余各顶点的最短路径"></a>7.6.1 从某个源点到其余各顶点的最短路径</h3><h3 id="7-6-2-每一对顶点之间的最短路径"><a href="#7-6-2-每一对顶点之间的最短路径" class="headerlink" title="7.6.2 每一对顶点之间的最短路径"></a>7.6.2 每一对顶点之间的最短路径</h3><h1 id="第8章-动态存储管理"><a href="#第8章-动态存储管理" class="headerlink" title="第8章 动态存储管理"></a>第8章 动态存储管理</h1><h2 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h2><h2 id="8-2-可利用空间表及分配方法"><a href="#8-2-可利用空间表及分配方法" class="headerlink" title="8.2 可利用空间表及分配方法"></a>8.2 可利用空间表及分配方法</h2><h2 id="8-3-边界标识法"><a href="#8-3-边界标识法" class="headerlink" title="8.3 边界标识法"></a>8.3 边界标识法</h2><h3 id="8-3-1-可利用空间表的结构"><a href="#8-3-1-可利用空间表的结构" class="headerlink" title="8.3.1 可利用空间表的结构"></a>8.3.1 可利用空间表的结构</h3><h3 id="8-3-2-分配算法"><a href="#8-3-2-分配算法" class="headerlink" title="8.3.2 分配算法"></a>8.3.2 分配算法</h3><h3 id="8-3-3-回收算法"><a href="#8-3-3-回收算法" class="headerlink" title="8.3.3 回收算法"></a>8.3.3 回收算法</h3><h2 id="8-4-伙伴系统"><a href="#8-4-伙伴系统" class="headerlink" title="8.4 伙伴系统"></a>8.4 伙伴系统</h2><h3 id="8-4-1-可利用空间表的结构"><a href="#8-4-1-可利用空间表的结构" class="headerlink" title="8.4.1 可利用空间表的结构"></a>8.4.1 可利用空间表的结构</h3><h3 id="8-4-2-分配算法"><a href="#8-4-2-分配算法" class="headerlink" title="8.4.2 分配算法"></a>8.4.2 分配算法</h3><h3 id="8-4-3-回收算法"><a href="#8-4-3-回收算法" class="headerlink" title="8.4.3 回收算法"></a>8.4.3 回收算法</h3><h2 id="8-5-无用单元收集"><a href="#8-5-无用单元收集" class="headerlink" title="8.5 无用单元收集"></a>8.5 无用单元收集</h2><h2 id="8-6-存储紧缩"><a href="#8-6-存储紧缩" class="headerlink" title="8.6 存储紧缩"></a>8.6 存储紧缩</h2><h1 id="第9章-查找"><a href="#第9章-查找" class="headerlink" title="第9章 查找"></a>第9章 查找</h1><h2 id="9-1-静态查找表"><a href="#9-1-静态查找表" class="headerlink" title="9.1 静态查找表"></a>9.1 静态查找表</h2><h3 id="9-1-1-顺序表的查找"><a href="#9-1-1-顺序表的查找" class="headerlink" title="9.1.1 顺序表的查找"></a>9.1.1 顺序表的查找</h3><h3 id="9-1-2-有序表的查找"><a href="#9-1-2-有序表的查找" class="headerlink" title="9.1.2 有序表的查找"></a>9.1.2 有序表的查找</h3><h3 id="9-1-3-静态树表的查找"><a href="#9-1-3-静态树表的查找" class="headerlink" title="9.1.3 静态树表的查找"></a>9.1.3 静态树表的查找</h3><h3 id="9-1-4-索引顺序表的查找"><a href="#9-1-4-索引顺序表的查找" class="headerlink" title="9.1.4 索引顺序表的查找"></a>9.1.4 索引顺序表的查找</h3><h2 id="9-2-动态查找表"><a href="#9-2-动态查找表" class="headerlink" title="9.2 动态查找表"></a>9.2 动态查找表</h2><h3 id="9-2-1-二叉排序树和平衡二叉树"><a href="#9-2-1-二叉排序树和平衡二叉树" class="headerlink" title="9.2.1 二叉排序树和平衡二叉树"></a>9.2.1 二叉排序树和平衡二叉树</h3><h3 id="9-2-2-B树和B-树"><a href="#9-2-2-B树和B-树" class="headerlink" title="9.2.2 B树和B+树"></a>9.2.2 B树和B+树</h3><h3 id="9-2-3-键树"><a href="#9-2-3-键树" class="headerlink" title="9.2.3 键树"></a>9.2.3 键树</h3><h2 id="9-3-哈希表"><a href="#9-3-哈希表" class="headerlink" title="9.3 哈希表"></a>9.3 哈希表</h2><h3 id="9-3-1-什么是哈希表"><a href="#9-3-1-什么是哈希表" class="headerlink" title="9.3.1 什么是哈希表"></a>9.3.1 什么是哈希表</h3><h3 id="9-3-2-哈希函数的构造方法"><a href="#9-3-2-哈希函数的构造方法" class="headerlink" title="9.3.2 哈希函数的构造方法"></a>9.3.2 哈希函数的构造方法</h3><h3 id="9-3-3-处理冲突的方法"><a href="#9-3-3-处理冲突的方法" class="headerlink" title="9.3.3 处理冲突的方法"></a>9.3.3 处理冲突的方法</h3><h3 id="9-3-4-哈希表的查找及其分析"><a href="#9-3-4-哈希表的查找及其分析" class="headerlink" title="9.3.4 哈希表的查找及其分析"></a>9.3.4 哈希表的查找及其分析</h3><h1 id="第10章-内部排序"><a href="#第10章-内部排序" class="headerlink" title="第10章 内部排序"></a>第10章 内部排序</h1><h2 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h2><h2 id="10-2-插入排序"><a href="#10-2-插入排序" class="headerlink" title="10.2 插入排序"></a>10.2 插入排序</h2><h3 id="10-2-1-直接插入排序"><a href="#10-2-1-直接插入排序" class="headerlink" title="10.2.1 直接插入排序"></a>10.2.1 直接插入排序</h3><h3 id="10-2-2-其他插入排序"><a href="#10-2-2-其他插入排序" class="headerlink" title="10.2.2 其他插入排序"></a>10.2.2 其他插入排序</h3><h3 id="10-2-3-希尔排序"><a href="#10-2-3-希尔排序" class="headerlink" title="10.2.3 希尔排序"></a>10.2.3 希尔排序</h3><h2 id="10-3-快速排序"><a href="#10-3-快速排序" class="headerlink" title="10.3 快速排序"></a>10.3 快速排序</h2><h2 id="10-4-选择排序"><a href="#10-4-选择排序" class="headerlink" title="10.4 选择排序"></a>10.4 选择排序</h2><h3 id="10-4-1-简单选择排序"><a href="#10-4-1-简单选择排序" class="headerlink" title="10.4.1 简单选择排序"></a>10.4.1 简单选择排序</h3><h3 id="10-4-2-树形选择排序"><a href="#10-4-2-树形选择排序" class="headerlink" title="10.4.2 树形选择排序"></a>10.4.2 树形选择排序</h3><h3 id="10-4-3-堆排序"><a href="#10-4-3-堆排序" class="headerlink" title="10.4.3 堆排序"></a>10.4.3 堆排序</h3><h2 id="10-5-归并排序"><a href="#10-5-归并排序" class="headerlink" title="10.5 归并排序"></a>10.5 归并排序</h2><h2 id="10-6-基数排序"><a href="#10-6-基数排序" class="headerlink" title="10.6 基数排序"></a>10.6 基数排序</h2><h3 id="10-6-1-多关键字的排序"><a href="#10-6-1-多关键字的排序" class="headerlink" title="10.6.1 多关键字的排序"></a>10.6.1 多关键字的排序</h3><h3 id="10-6-2-链式基数排序"><a href="#10-6-2-链式基数排序" class="headerlink" title="10.6.2 链式基数排序"></a>10.6.2 链式基数排序</h3><h2 id="10-7-各种内部排序方法的比较讨论"><a href="#10-7-各种内部排序方法的比较讨论" class="headerlink" title="10.7 各种内部排序方法的比较讨论"></a>10.7 各种内部排序方法的比较讨论</h2><h1 id="第11章-外部排序"><a href="#第11章-外部排序" class="headerlink" title="第11章 外部排序"></a>第11章 外部排序</h1><h2 id="11-1-外存信息的存取"><a href="#11-1-外存信息的存取" class="headerlink" title="11.1 外存信息的存取"></a>11.1 外存信息的存取</h2><h2 id="11-2-外部排序的方法"><a href="#11-2-外部排序的方法" class="headerlink" title="11.2 外部排序的方法"></a>11.2 外部排序的方法</h2><h2 id="11-3-多路平衡归并的实现"><a href="#11-3-多路平衡归并的实现" class="headerlink" title="11.3 多路平衡归并的实现"></a>11.3 多路平衡归并的实现</h2><h2 id="11-4-置换一选择排序"><a href="#11-4-置换一选择排序" class="headerlink" title="11.4 置换一选择排序"></a>11.4 置换一选择排序</h2><h2 id="11-5-最佳归并树"><a href="#11-5-最佳归并树" class="headerlink" title="11.5 最佳归并树"></a>11.5 最佳归并树</h2><h1 id="第12章-文件"><a href="#第12章-文件" class="headerlink" title="第12章 文件"></a>第12章 文件</h1><h2 id="12-1-有关文件的基本概念"><a href="#12-1-有关文件的基本概念" class="headerlink" title="12.1 有关文件的基本概念"></a>12.1 有关文件的基本概念</h2><h2 id="12-2-顺序文件"><a href="#12-2-顺序文件" class="headerlink" title="12.2 顺序文件"></a>12.2 顺序文件</h2><h2 id="12-3-索引文件"><a href="#12-3-索引文件" class="headerlink" title="12.3 索引文件"></a>12.3 索引文件</h2><h2 id="12-4-ISAM文件和VSAM文件"><a href="#12-4-ISAM文件和VSAM文件" class="headerlink" title="12.4 ISAM文件和VSAM文件"></a>12.4 ISAM文件和VSAM文件</h2><h3 id="12-4-1-ISAM文件"><a href="#12-4-1-ISAM文件" class="headerlink" title="12.4.1 ISAM文件"></a>12.4.1 ISAM文件</h3><h3 id="12-4-2-VSAM文件"><a href="#12-4-2-VSAM文件" class="headerlink" title="12.4.2 VSAM文件"></a>12.4.2 VSAM文件</h3><h2 id="12-5-直接存取文件-散列文件"><a href="#12-5-直接存取文件-散列文件" class="headerlink" title="12.5 直接存取文件(散列文件)"></a>12.5 直接存取文件(散列文件)</h2><h2 id="12-6-多关键字文件"><a href="#12-6-多关键字文件" class="headerlink" title="12.6 多关键字文件"></a>12.6 多关键字文件</h2><h3 id="12-6-1-多重表文件"><a href="#12-6-1-多重表文件" class="headerlink" title="12.6.1 多重表文件"></a>12.6.1 多重表文件</h3><h3 id="12-6-2-倒排文件"><a href="#12-6-2-倒排文件" class="headerlink" title="12.6.2 倒排文件"></a>12.6.2 倒排文件</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-绪论&quot;&gt;&lt;a href=&quot;#第1章-绪论&quot; class=&quot;headerlink&quot; title=&quot;第1章 绪论&quot;&gt;&lt;/a&gt;第1章 绪论&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是数据结构&quot;&gt;&lt;a href=&quot;#1-1-什么是数据结构&quot; class=&quot;header
      
    
    </summary>
    
      <category term="01_software_engineering" scheme="https://30s.github.io/categories/01-software-engineering/"/>
    
      <category term="014_data_structure" scheme="https://30s.github.io/categories/01-software-engineering/014-data-structure/"/>
    
    
      <category term="Software Engineering" scheme="https://30s.github.io/tags/Software-Engineering/"/>
    
      <category term="Data Structure" scheme="https://30s.github.io/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>ACM OJ集锦</title>
    <link href="https://30s.github.io/2010/09/01/01_software_engineering/015_algorithm/0151_acm/acm_oj_collection/"/>
    <id>https://30s.github.io/2010/09/01/01_software_engineering/015_algorithm/0151_acm/acm_oj_collection/</id>
    <published>2010-09-01T12:00:00.000Z</published>
    <updated>2018-03-07T12:27:37.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACM-OJ-Collection（排名不分先后）："><a href="#ACM-OJ-Collection（排名不分先后）：" class="headerlink" title="ACM OJ Collection（排名不分先后）："></a>ACM OJ Collection（排名不分先后）：</h1><h2 id="中国：-China"><a href="#中国：-China" class="headerlink" title="中国：(China)"></a>中国：(China)</h2><h3 id="华东地区："><a href="#华东地区：" class="headerlink" title="华东地区："></a>华东地区：</h3><h4 id="浙江："><a href="#浙江：" class="headerlink" title="浙江："></a>浙江：</h4><ul><li>杭州电子科技大学(HDU)：<a href="http://acm.hdu.edu.cn/" target="_blank" rel="noopener">http://acm.hdu.edu.cn/</a></li><li>浙江大学（ZJU）：<a href="http://acm.zju.edu.cn/" target="_blank" rel="noopener">http://acm.zju.edu.cn/</a></li><li>浙江工业大学（ZJUT）：<a href="http://acm.zjut.edu.cn/" target="_blank" rel="noopener">http://acm.zjut.edu.cn/</a></li><li>浙江师范大学（ZJNU）：<a href="http://acm.zjnu.cn/" target="_blank" rel="noopener">http://acm.zjnu.cn/</a></li><li>浙江工商（ZJGSU）：<a href="http://acm.zjgsu.edu.cn/" target="_blank" rel="noopener">http://acm.zjgsu.edu.cn/</a></li><li>宁波理工（NIT）：<a href="http://acm.nit.net.cn/" target="_blank" rel="noopener">http://acm.nit.net.cn/</a></li></ul><h4 id="上海："><a href="#上海：" class="headerlink" title="上海："></a>上海：</h4><ul><li>华东师范大学（ECNU）：<a href="http://acm.cs.ecnu.edu.cn/" target="_blank" rel="noopener">http://acm.cs.ecnu.edu.cn/</a></li><li>华东理工大学（ECUST）：<a href="http://acm.ecust.edu.cn/" target="_blank" rel="noopener">http://acm.ecust.edu.cn/</a></li><li>同济大学（TJU）：<a href="http://acm.tongji.edu.cn/" target="_blank" rel="noopener">http://acm.tongji.edu.cn/</a></li></ul><h4 id="江苏："><a href="#江苏：" class="headerlink" title="江苏："></a>江苏：</h4><ul><li>南京航空航天大学： <a href="http://acm.nuaa.edu.cn/" target="_blank" rel="noopener">http://acm.nuaa.edu.cn/</a></li></ul><h4 id="福建："><a href="#福建：" class="headerlink" title="福建："></a>福建：</h4><ul><li>福州大学（FZU）：<a href="http://acm.fzu.edu.cn/" target="_blank" rel="noopener">http://acm.fzu.edu.cn/</a></li><li>厦门大学（XMU）：<a href="http://acm.xmu.edu.cn/" target="_blank" rel="noopener">http://acm.xmu.edu.cn/</a></li><li>福建师范大学（FJNU）：<a href="http://acm.fjnu.edu.cn/" target="_blank" rel="noopener">http://acm.fjnu.edu.cn/</a></li></ul><h4 id="安徽："><a href="#安徽：" class="headerlink" title="安徽："></a>安徽：</h4><ul><li>中国科技大学（USTC）：<a href="http://acm.ustc.edu.cn/" target="_blank" rel="noopener">http://acm.ustc.edu.cn/</a></li></ul><h3 id="华北地区："><a href="#华北地区：" class="headerlink" title="华北地区："></a>华北地区：</h3><h4 id="北京："><a href="#北京：" class="headerlink" title="北京："></a>北京：</h4><ul><li>北京交大（BJTU）：<a href="http://acm.bjtu.edu.cn/" target="_blank" rel="noopener">http://acm.bjtu.edu.cn/</a></li><li>北京大学（PKU）：<a href="http://acm.pku.edu.cn/" target="_blank" rel="noopener">http://acm.pku.edu.cn/</a></li></ul><h4 id="天津："><a href="#天津：" class="headerlink" title="天津："></a>天津：</h4><ul><li>南开大学（NAIKAI）：<a href="http://acm.nankai.edu.cn/" target="_blank" rel="noopener">http://acm.nankai.edu.cn/</a></li><li>天津大学（TJU）：<a href="http://acm.tju.edu.cn/toj/" target="_blank" rel="noopener">http://acm.tju.edu.cn/toj/</a></li></ul><h3 id="东北地区："><a href="#东北地区：" class="headerlink" title="东北地区："></a>东北地区：</h3><h4 id="黑龙江："><a href="#黑龙江：" class="headerlink" title="黑龙江："></a>黑龙江：</h4><ul><li>哈尔滨工程大学（HRBEU）：<a href="http://acm.hrbeu.edu.cn/" target="_blank" rel="noopener">http://acm.hrbeu.edu.cn/</a></li></ul><h3 id="华南地区："><a href="#华南地区：" class="headerlink" title="华南地区："></a>华南地区：</h3><h4 id="广东："><a href="#广东：" class="headerlink" title="广东："></a>广东：</h4><ul><li>中山大学（ZSU）：<a href="http://acm.zsu.edu.cn/" target="_blank" rel="noopener">http://acm.zsu.edu.cn/</a></li></ul><h3 id="西南地区："><a href="#西南地区：" class="headerlink" title="西南地区："></a>西南地区：</h3><h4 id="四川："><a href="#四川：" class="headerlink" title="四川："></a>四川：</h4><ul><li>西南民大（SWUN）：<a href="http://acm.swun.edu.cn/" target="_blank" rel="noopener">http://acm.swun.edu.cn/</a></li></ul><h3 id="华中地区："><a href="#华中地区：" class="headerlink" title="华中地区："></a>华中地区：</h3><h4 id="湖北："><a href="#湖北：" class="headerlink" title="湖北："></a>湖北：</h4><ul><li>华中科技大学（HUST）：<a href="http://acm.hust.edu.cn/JudgeOnline/" target="_blank" rel="noopener">http://acm.hust.edu.cn/JudgeOnline/</a></li><li>武汉大学（WHU）：<a href="http://acm.whu.edu.cn/" target="_blank" rel="noopener">http://acm.whu.edu.cn/</a></li></ul><h3 id="港澳台地区："><a href="#港澳台地区：" class="headerlink" title="港澳台地区："></a>港澳台地区：</h3><h4 id="香港："><a href="#香港：" class="headerlink" title="香港："></a>香港：</h4><ul><li>香港大学(HKOI)：<a href="http://judge.hkoi.org/" target="_blank" rel="noopener">http://judge.hkoi.org/</a></li></ul><hr><h2 id="俄罗斯：-Russia"><a href="#俄罗斯：-Russia" class="headerlink" title="俄罗斯：(Russia)"></a>俄罗斯：(Russia)</h2><ul><li>乌拉尔大学（URAL）：<a href="http://acm.timus.ru/" target="_blank" rel="noopener">http://acm.timus.ru/</a></li><li>萨拉托夫大学（SGU）：<a href="http://acm.sgu.ru/" target="_blank" rel="noopener">http://acm.sgu.ru/</a></li><li>(vallod) ：<a href="http://acm.uva.es/" target="_blank" rel="noopener">http://acm.uva.es/</a></li><li>EL Judge(MIPT):：<a href="http://acm.mipt.ru/judge/problems.pl" target="_blank" rel="noopener">http://acm.mipt.ru/judge/problems.pl</a></li></ul><hr><h2 id="西班牙：-Spanish"><a href="#西班牙：-Spanish" class="headerlink" title="西班牙：(Spanish)"></a>西班牙：(Spanish)</h2><ul><li>瓦拉杜利德大学（UVA）：<a href="http://acm.uva.es/" target="_blank" rel="noopener">http://acm.uva.es/</a></li></ul><hr><h2 id="美国：-America"><a href="#美国：-America" class="headerlink" title="美国：(America)"></a>美国：(America)</h2><ul><li>USACO: <a href="http://train.usaco.org/usacogate" target="_blank" rel="noopener">http://train.usaco.org/usacogate</a></li></ul><hr><h3 id="波兰：-Poland"><a href="#波兰：-Poland" class="headerlink" title="波兰：(Poland)"></a>波兰：(Poland)</h3><ul><li>SPOJ：<a href="http://www.spoj.pl/" target="_blank" rel="noopener">http://www.spoj.pl/</a></li></ul><hr><h2 id="吉尔吉斯斯坦-：-Kirgizstan"><a href="#吉尔吉斯斯坦-：-Kirgizstan" class="headerlink" title="吉尔吉斯斯坦:：(Kirgizstan)"></a>吉尔吉斯斯坦:：(Kirgizstan)</h2><ul><li>KRSU: <a href="http://www.olymp.krsu.edu.kg/GeneralProblemset.aspx" target="_blank" rel="noopener">http://www.olymp.krsu.edu.kg/GeneralProblemset.aspx</a></li></ul><hr><h2 id="中国各大高校BBS"><a href="#中国各大高校BBS" class="headerlink" title="中国各大高校BBS:"></a>中国各大高校BBS:</h2><ul><li><a href="http://acm.hdu.edu.cn/forum/（杭电）" target="_blank" rel="noopener">http://acm.hdu.edu.cn/forum/（杭电）</a></li><li><a href="http://www.hdubbs.com/（杭电）" target="_blank" rel="noopener">http://www.hdubbs.com/（杭电）</a></li><li><a href="http://www.freecity.cn/（浙大）" target="_blank" rel="noopener">http://www.freecity.cn/（浙大）</a></li><li><a href="http://bbs.freecity.cn/(浙大)" target="_blank" rel="noopener">http://bbs.freecity.cn/(浙大)</a></li></ul><hr><h2 id="Others："><a href="#Others：" class="headerlink" title="Others："></a>Others：</h2><ul><li>Topcoder：<a href="http://www.topcoder.com/tc" target="_blank" rel="noopener">http://www.topcoder.com/tc</a></li><li>ACM-ICPC：<a href="http://icpc.baylor.edu/icpc/" target="_blank" rel="noopener">http://icpc.baylor.edu/icpc/</a></li><li>美国信息学奥林匹克竞赛官方网站：<a href="http://www.usaco.org/" target="_blank" rel="noopener">http://www.usaco.org/</a></li><li>全美计算机奥林匹克竞赛：<a href="http://ace.delos.com/usacogate" target="_blank" rel="noopener">http://ace.delos.com/usacogate</a></li><li>信息学初学者之家：<a href="http://oibh.ioiforum.org/" target="_blank" rel="noopener">http://oibh.ioiforum.org/</a></li><li>中国教育曙光网：<a href="http://www.chinaschool.org/aosai/" target="_blank" rel="noopener">http://www.chinaschool.org/aosai/</a></li><li>福建信息学奥林匹克：<a href="http://www.cfcs.com.cn/fjas/index.htm" target="_blank" rel="noopener">http://www.cfcs.com.cn/fjas/index.htm</a></li><li>IOI：<a href="http://olympiads.win.tue.nl/ioi/" target="_blank" rel="noopener">http://olympiads.win.tue.nl/ioi/</a></li><li>高效信息学在线判题系统（VIJOS）：<a href="http://www.vijos.cn/" target="_blank" rel="noopener">http://www.vijos.cn/</a></li><li>ACM的例程和测试数据：<a href="http://www.karrels.org/Ed/ACM/" target="_blank" rel="noopener">http://www.karrels.org/Ed/ACM/</a></li><li>ACM社区：<a href="http://www.608088.com/" target="_blank" rel="noopener">http://www.608088.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ACM-OJ-Collection（排名不分先后）：&quot;&gt;&lt;a href=&quot;#ACM-OJ-Collection（排名不分先后）：&quot; class=&quot;headerlink&quot; title=&quot;ACM OJ Collection（排名不分先后）：&quot;&gt;&lt;/a&gt;ACM OJ C
      
    
    </summary>
    
      <category term="01_software_engineering" scheme="https://30s.github.io/categories/01-software-engineering/"/>
    
      <category term="015_algorithm" scheme="https://30s.github.io/categories/01-software-engineering/015-algorithm/"/>
    
      <category term="0151_acm" scheme="https://30s.github.io/categories/01-software-engineering/015-algorithm/0151-acm/"/>
    
    
      <category term="Software Engineering" scheme="https://30s.github.io/tags/Software-Engineering/"/>
    
      <category term="Algorithm" scheme="https://30s.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaNIO系列教程</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0224_io/nio/JavaNIO%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0224_io/nio/JavaNIO系列教程/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-07T15:20:42.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaNIO系列教程"><a href="#JavaNIO系列教程" class="headerlink" title="JavaNIO系列教程"></a>JavaNIO系列教程</h1><p><a href="http://ifeve.com/java-nio-all/" target="_blank" rel="noopener">http://ifeve.com/java-nio-all/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaNIO系列教程&quot;&gt;&lt;a href=&quot;#JavaNIO系列教程&quot; class=&quot;headerlink&quot; title=&quot;JavaNIO系列教程&quot;&gt;&lt;/a&gt;JavaNIO系列教程&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ifeve.com/java-nio
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0224_io" scheme="https://30s.github.io/categories/02-code-language/022-java/0224-io/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="IO" scheme="https://30s.github.io/tags/IO/"/>
    
      <category term="NIO" scheme="https://30s.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP十个入门问题</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0225_net/tcp_ip/TCP%20IP%E5%8D%81%E4%B8%AA%E5%85%A5%E9%97%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0225_net/tcp_ip/TCP IP十个入门问题/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-12T21:02:11.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP-IP十个入门问题"><a href="#TCP-IP十个入门问题" class="headerlink" title="TCP IP十个入门问题"></a>TCP IP十个入门问题</h1><ul><li><p>本文整理了一些TCP/IP协议簇中需要必知必会的十大问题，既是面试高频问题，又是程序员必备基础素养。</p><p>1、TCP/IP模型</p><p>TCP/IP协议模型（Transmission Control Protocol/Internet Protocol），包含了一系列构成互联网基础的网络协议，是Internet的核心协议。</p><p>基于TCP/IP的参考模型将协议分成四个层次，它们分别是链路层、网络层、传输层和应用层。下图表示TCP/IP模型与OSI模型各层的对照关系。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170915/a19f861043d9491eb7aa0874921202c7.jpeg" alt=""></p><p>TCP/IP协议族按照层次由上到下，层层包装。最上面的是应用层，这里面有http，ftp,等等我们熟悉的协议。而第二层则是传输层，著名的TCP和UDP协议就在这个层次。第三层是网络层，IP协议就在这里，它负责对数据加上IP地址和其他的数据以确定传输的目标。第四层是数据链路层，这个层次为待传送的数据加入一个以太网协议头，并进行CRC编码，为最后的数据传输做准备。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170915/3ee2e26552b649d2893c4149acaadb9a.jpeg" alt=""></p><p>上图清楚地表示了TCP/IP协议中每个层的作用，而TCP/IP协议通信的过程其实就对应着数据入栈与出栈的过程。入栈的过程，数据发送方每层不断地封装首部与尾部，添加一些传输的信息，确保能传输到目的地。出栈的过程，数据接收方每层不断地拆除首部与尾部，得到最终传输的数据。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170915/26f37e1988614ffa9eec5dcd6bed3fbd.jpeg" alt=""></p><p>上图以HTTP协议为例，具体说明。</p><p>2、数据链路层</p><p>物理层负责0、1比特流与物理设备电压高低、光的闪灭之间的互换。 数据链路层负责将0、1序列划分为数据帧从一个节点传输到临近的另一个节点,这些节点是通过MAC来唯一标识的(MAC,物理地址，一个主机会有一个MAC地址)。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170915/5d5d36018c3248c78c7e18aab6374408.jpeg" alt=""></p><p>封装成帧: 把网络层数据报加头和尾，封装成帧,帧头中包括源MAC地址和目的MAC地址。</p><p>透明传输:零比特填充、转义字符。</p><p>可靠传输: 在出错率很低的链路上很少用，但是无线链路WLAN会保证可靠传输。</p><p>差错检测(CRC):接收者检测错误,如果发现差错，丢弃该帧。</p><p>3、网络层</p><blockquote><p><strong>1.IP协议</strong></p></blockquote><p>IP协议是TCP/IP协议的核心，所有的TCP，UDP，IMCP，IGMP的数据都以IP数据格式传输。要注意的是，IP不是可靠的协议，这是说，IP协议没有提供一种数据未传达以后的处理机制，这被认为是上层协议：TCP或UDP要做的事情。</p><blockquote><p><strong>1.1 IP地址</strong></p></blockquote><p>在数据链路层中我们一般通过MAC地址来识别不同的节点，而在IP层我们也要有一个类似的地址标识，这就是IP地址。</p><p>32位IP地址分为网络位和地址位，这样做可以减少路由器中路由表记录的数目，有了网络地址，就可以限定拥有相同网络地址的终端都在同一个范围内，那么路由表只需要维护一条这个网络地址的方向，就可以找到相应的这些终端了。</p><p>A类IP地址: 0.0.0.0~127.255.255.255</p><p>B类IP地址:128.0.0.0~191.255.255.255</p><p>C类IP地址:192.0.0.0~239.255.255.255</p><blockquote><p><strong>1.2 IP协议头</strong></p></blockquote><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170915/7cce2dec445a4f4abf53b00657cdd49f.jpeg" alt=""></p><p>这里只介绍:八位的TTL字段。这个字段规定该数据包在穿过多少个路由之后才会被抛弃。某个IP数据包每穿过一个路由器，该数据包的TTL数值就会减少1，当该数据包的TTL成为零，它就会被自动抛弃。</p><p>这个字段的最大值也就是255，也就是说一个协议包也就在路由器里面穿行255次就会被抛弃了，根据系统的不同，这个数字也不一样，一般是32或者是64。</p><blockquote><p><strong>2.ARP及RARP协议</strong></p></blockquote><p>ARP 是根据IP地址获取MAC地址的一种协议。</p><p>ARP（地址解析）协议是一种解析协议，本来主机是完全不知道这个IP对应的是哪个主机的哪个接口，当主机要发送一个IP包的时候，会首先查一下自己的ARP高速缓存（就是一个IP-MAC地址对应表缓存）。</p><p>如果查询的IP－MAC值对不存在，那么主机就向网络发送一个ARP协议广播包，这个广播包里面就有待查询的IP地址，而直接收到这份广播的包的所有主机都会查询自己的IP地址，如果收到广播包的某一个主机发现自己符合条件，那么就准备好一个包含自己的MAC地址的ARP包传送给发送ARP广播的主机。</p><p>而广播主机拿到ARP包后会更新自己的ARP缓存（就是存放IP-MAC对应表的地方）。发送广播的主机就会用新的ARP缓存数据准备好数据链路层的的数据包发送工作。</p><p>RARP协议的工作与此相反，不做赘述。</p><blockquote><p><strong>3. ICMP协议</strong></p></blockquote><p>IP协议并不是一个可靠的协议，它不保证数据被送达，那么，自然的，保证数据送达的工作应该由其他的模块来完成。其中一个重要的模块就是ICMP(网络控制报文)协议。ICMP不是高层协议，而是IP层的协议。</p><p>当传送IP数据包发生错误。比如主机不可达，路由不可达等等，ICMP协议将会把错误信息封包，然后传送回给主机。给主机一个处理错误的机会，这 也就是为什么说建立在IP层以上的协议是可能做到安全的原因。</p><p><strong>4、ping</strong></p><p>ping可以说是ICMP的最著名的应用，是TCP/IP协议的一部分。利用“ping”命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障。</p><p>例如：当我们某一个网站上不去的时候。通常会ping一下这个网站。ping会回显出一些有用的信息。一般的信息如下:</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170915/b1e16087a8dc4a4bb7767f9c0ff5d4a3.jpeg" alt=""></p><p>ping这个单词源自声纳定位，而这个程序的作用也确实如此，它利用ICMP协议包来侦测另一个主机是否可达。原理是用类型码为0的ICMP发请 求，受到请求的主机则用类型码为8的ICMP回应。</p><p>ping程序来计算间隔时间，并计算有多少个包被送达。用户就可以判断网络大致的情况。我们可以看到， ping给出来了传送的时间和TTL的数据。</p><p>5、Traceroute</p><p>Traceroute是用来侦测主机到目的主机之间所经路由情况的重要工具，也是最便利的工具。</p><p>Traceroute的原理是非常非常的有意思，它收到到目的主机的IP后，首先给目的主机发送一个TTL=1的UDP数据包，而经过的第一个路由器收到这个数据包以后，就自动把TTL减1，而TTL变为0以后，路由器就把这个包给抛弃了，并同时产生 一个主机不可达的ICMP数据报给主机。主机收到这个数据报以后再发一个TTL=2的UDP数据报给目的主机，然后刺激第二个路由器给主机发ICMP数据 报。如此往复直到到达目的主机。这样，traceroute就拿到了所有的路由器IP。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170915/89716babca8d4115969a4de61dffe28a.jpeg" alt=""></p><p>6、TCP/UDP</p><p>TCP/UDP都是是传输层协议，但是两者具有不同的特性，同时也具有不同的应用场景，下面以图表的形式对比分析。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170915/edead750c5e9439f9989b5a4980611b3.jpeg" alt=""></p><p><strong>面向报文</strong></p><p>面向报文的传输方式是应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。因此，应用程序必须选择合适大小的报文。若报文太长，则IP层需要分片，降低效率。若太短，会是IP太小。</p><p><strong>面向字节流</strong></p><p>面向字节流的话，虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序看成是一连串的无结构的字节流。TCP有一个缓冲，当应用程序传送的数据块太长，TCP就可以把它划分短一些再传送。</p><p>关于拥塞控制，流量控制，是TCP的重点，后面讲解。</p><p>TCP和UDP协议的一些应用</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170915/ed1288a413654b60a94fd8fb5fa2c767.jpeg" alt=""></p><p>什么时候应该使用TCP？</p><p>当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。</p><p>什么时候应该使用UDP？</p><p>当对网络通讯质量要求不高的时候，要求网络通讯速度能尽量的快，这时就可以使用UDP。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TCP-IP十个入门问题&quot;&gt;&lt;a href=&quot;#TCP-IP十个入门问题&quot; class=&quot;headerlink&quot; title=&quot;TCP IP十个入门问题&quot;&gt;&lt;/a&gt;TCP IP十个入门问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本文整理了一些TCP/IP协议簇中需要必知
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0225_net" scheme="https://30s.github.io/categories/02-code-language/022-java/0225-net/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="TCP/IP" scheme="https://30s.github.io/tags/TCP-IP/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="NET" scheme="https://30s.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>Java网络教程:ServerSocket</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0225_net/socket/Java%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8BServerSocket/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0225_net/socket/Java网络教程ServerSocket/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-12T21:05:41.101Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h3 id="Java网络教程-ServerSocket"><a href="#Java网络教程-ServerSocket" class="headerlink" title="Java网络教程: ServerSocket"></a>Java网络教程: ServerSocket</h3><p><a href="http://tutorials.jenkov.com/java-networking/server-sockets.html" target="_blank" rel="noopener">原文链接</a> 作者：<a href="http://jakob.jenkov.com/" target="_blank" rel="noopener">Jakob Jenkov</a> 译者：homesick</p><p>用java.net.ServerSocket实现java服务通过TCP/IP监听客户端连接，你也可以用Java NIO 来代替java网络标准API，这时候需要用到 ServerSocketChannel。</p><h2 id="创建一个-ServerSocket连接"><a href="#创建一个-ServerSocket连接" class="headerlink" title="创建一个 ServerSocket连接"></a>创建一个 ServerSocket连接</h2><p>以下是一个创建ServerSocket类来监听9000端口的一个简单的代码</p><p>ServerSocket serverSocket = new ServerSocket(9000);</p><h2 id="监听请求的连接"><a href="#监听请求的连接" class="headerlink" title="监听请求的连接"></a>监听请求的连接</h2><p>要获取请求的连接需要用ServerSocket.accept()方法。该方法返回一个Socket类，该类具有普通java Socket类的所有特性。代码如下：</p><p>ServerSocket serverSocket = new ServerSocket(9000); boolean isStopped = false;while(!isStopped){   Socket clientSocket = serverSocket.accept();    //do something with clientSocket}</p><p>对每个调用了accept()方法的类都只获得一个请求的连接。</p><p>另外，请求的连接也只能在线程运行的server中调用了accept()方法之后才能够接受请求。线程运行在server中其它所有的方法上的时候都不能接受客户端的连接请求。所以”接受”请求的线程通常都会把Socket的请求连接放入一个工作线程池中，然后再和客户端连接。更多关于多线程服务端设计的文档请参考 java多线程服务</p><h2 id="关闭客户端Socket"><a href="#关闭客户端Socket" class="headerlink" title="关闭客户端Socket"></a>关闭客户端Socket</h2><p>客户端请求执行完毕，并且不会再有该客户端的其它请求发送过来的时候，就需要关闭Socket连接，这和关闭一个普通的客户端Socket连接一样。如下代码来执行关闭：</p><p>socket.close();</p><h2 id="关闭服务端Sockets"><a href="#关闭服务端Sockets" class="headerlink" title="关闭服务端Sockets"></a>关闭服务端Sockets</h2><p>要关闭服务的时候需要关掉 ServerSocket连接。通过执行如下代码：</p><p>serverSocket.close();</p><p><a href="http://ifeve.com/java-network-serversocket-2/" target="_blank" rel="noopener">http://ifeve.com/java-network-serversocket-2/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;Java网络教程-ServerSocket&quot;&gt;&lt;a href=&quot;#Java网络教程-ServerSocket&quot; class=&quot;headerlink&quot; title=&quot;Java网络教程: ServerSocket&quot;&gt;&lt;/a&gt;Java网络教程: Ser
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0225_net" scheme="https://30s.github.io/categories/02-code-language/022-java/0225-net/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="NET" scheme="https://30s.github.io/tags/NET/"/>
    
      <category term="Socket" scheme="https://30s.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>Java网络编程：UDP DatagramSocket</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0225_net/socket/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9AUDP%20DatagramSocket/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0225_net/socket/Java网络编程：UDP DatagramSocket/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-12T20:59:58.840Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h3 id="Java网络编程：UDP-DatagramSocket"><a href="#Java网络编程：UDP-DatagramSocket" class="headerlink" title="Java网络编程：UDP DatagramSocket"></a>Java网络编程：UDP DatagramSocket</h3><p><a href="http://tutorials.jenkov.com/java-networking/udp-datagram-sockets.html" target="_blank" rel="noopener">原文地址</a></p><p>DatagramSocket类是java通过UDP通信的途径。UDP仍位于IP层的上面。 你可以用DatagramSocket类发送和接收UDP数据包。</p><p><strong>UDP 和TCP</strong></p><p>UDP工作方式和TCP有点不同。当你通过TCP发送数据时，你先要创建连接。一旦TCP连接建立了，TCP会保证你的数据传递到对端，否则它将告诉你已发生的错误。</p><p>仅仅用UDP来发送数据包（datagrams）到网络间的某个IP地址。你不能保证数据会不会到达。你也不能保证UDP数据包到达接收方的指令。这意味着UDP比TCP有更少的协议开销（无完整检查流）。</p><p>当数据传输过程中不在乎数据包是否丢失时，UDP就比较适合这样的数据传输。比如，网上的电视信号的传输。你希望信号到达客户端时尽可能地接近直播。因此，如果丢失一两个画面，你一点都不在乎。你不希望直播延迟，值想确保所有的画面显示在客户端。你宁可跳过丢失的画面，希望一直看到最新的画面。</p><p>这种情况也会发生在网上摄像机直播节目中。谁会关心过去发生的什么，你只想显示当前的画面。你不希望比实际情况慢30s结束，只因为你想看到摄像机显示给观众的所有画面。这跟摄像机录像有点不同。从摄像机录制画面到磁盘，你不希望丢失一个画面。你可能还希望有点延迟，如果有重大的情况发生，就不需要倒回去检查画面。</p><h3 id="通过DatagramSocket发送数据"><a href="#通过DatagramSocket发送数据" class="headerlink" title="通过DatagramSocket发送数据"></a><strong>通过DatagramSocket发送数据</strong></h3><p>通过Java的DatagramSocket类发送数据，首先需要创建DatagramPacket。如下：</p><p>buffer = new byte[65508];<br>InetAddress address = new DatagramPacket(buffer, buffer.length, address,9000);</p><p>字节缓冲块（字节数组）就是UDP数据包中用来发送的数据。缓冲块上限长度为65508字节，是单一UDP数据包发送的最大的数据量。</p><p>数据包构造函数的长度就是缓存块中用于发送的数据的长度。所有多于最大容量的数据都会被忽略。</p><p>包含节点（例如服务器）地址的InetAddress实例携带节点（如服务器）的地址发送的UDP数据包。InetAddress类表示一个ip地址（网络地址）。getByName()方法返回带有一个InetAddress实例，该实例带有匹配主机名的ip地址。</p><p>端口参数是UDP端口服务器用来接收正在监听的数据。UDP端口和TCP端口是不一样的。一台电脑同时有不同的进程监听UDP和TCP 80端口。</p><p>为了发送数据包，你需要创建DatagramSocket来发送数据。如下：</p><p>DatagramSocketdatagramSocket = new DatagramSocket();</p><p>调用send()方法发送数据，像这样：</p><p>datagramSocket.send(packet);</p><p>完整示例：</p><p>DatagramSocketdatagramSocket = new DatagramSocket();<br>byte [] buffer = “0123456789”.getBytes();<br>InetAddressreceiverAddress = InetAddress.getLocalHost();<br>DataframPacket packet =<code></code>new<code></code>DatagramPacket( buffer, buffer.length, receiverAddress, 80);<br>datagramSocket.send(packet);</p><h3 id="从DatagramSocket获取数据"><a href="#从DatagramSocket获取数据" class="headerlink" title="从DatagramSocket获取数据"></a><strong>从DatagramSocket获取数据</strong></h3><p>从DataframSocket获取数据时，首先创建DataframPacket,然后通过DatagramSocket类的receive()方法接收数据。例如：<br>DatagramSocketdatagramSocket = new DatagramSocket(80);<br>yte [] buffer = new byte [10];<br>DatagramPacket packet = new DatagramPacket(buffer, buffer.length);<br>datagramSocket.receive(packet);</p><p>注意DatagramSocket是如何通过传递参数80到它的构造器初始化的。这个参数是UDP端口的DatagramSocket用来接收UDP数据包的。像之前提到的，TCP和UDP端口是不一样的，也不重叠。你可以有俩个不同的进程同时在端口80监听TCP和UDP，没有任何冲突。</p><p>第二，字节缓存块和DatagramPacket创建了。注意DatagramPacket是没有关于节点如何发送数据的信息的，当创建一个方数据的DatagramPacket时，它会直到这个信息。这就是为什么我们会用DatagramPacket接收数据而不是发送数据。因此没有目标地址是必须的。</p><p>最后，调用DatagramSocket的receive()方法。直到数据包接收到为止，这个方法都是阻塞的。</p><p>接收的数据位于DatagramPacket的字节缓冲块。缓冲块可以通过调用getData()获得：</p><p>byte [] buffer = packet.getData();</p><p>缓冲块接收了多少的数据需要你去找出来。你用的协议应该定义每个UDP包发多少数据，活着定义一个你能找到的数据结束标记。<br>一个真正的服务端程序可能会在一个loop中调用receive()方法，传送所有接收到的DatagramPacket到工作的线程池中，就像TCP服务器处理请求连接一样（查看<a href="http://tutorials.jenkov.com/java-multithreaded-servers/index.html" target="_blank" rel="noopener">Java Multithreaded Servers</a>获取更多详情）</p><p><a href="http://ifeve.com/java-udp-datagramsocket/" target="_blank" rel="noopener">http://ifeve.com/java-udp-datagramsocket/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;Java网络编程：UDP-DatagramSocket&quot;&gt;&lt;a href=&quot;#Java网络编程：UDP-DatagramSocket&quot; class=&quot;headerlink&quot; title=&quot;Java网络编程：UDP DatagramSocket&quot;&gt;
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0225_net" scheme="https://30s.github.io/categories/02-code-language/022-java/0225-net/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="NET" scheme="https://30s.github.io/tags/NET/"/>
    
      <category term="Socket" scheme="https://30s.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>Java网络教程之Socket</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0225_net/socket/Java%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B%E4%B9%8BSocket/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0225_net/socket/Java网络教程之Socket/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-12T21:01:50.835Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h3 id="Java网络教程之Socket"><a href="#Java网络教程之Socket" class="headerlink" title="Java网络教程之Socket"></a>Java网络教程之Socket</h3><p><a href="http://tutorials.jenkov.com/java-networking/sockets.html" target="_blank" rel="noopener"><strong>原文地址</strong></a>  译者：贾毅</p><p>当我们想要在Java中使用TCP/IP通过网络连接到服务器时，就需要创建java.net.Socket对象并连接到服务器。假如希望使用Java NIO，也可以创建Java NIO中的<a href="http://tutorials.jenkov.com/java-nio/socketchannel.html" target="_blank" rel="noopener">SocketChannel</a>对象。</p><p><strong>创建**</strong>Socket**</p><p>下面的示例代码是连接到IP地址为78.64.84.171服务器上的80端口，这台服务器就是我们的Web服务器（<a href="http://www.jenkov.com），而80端口就是Web服务端口。" target="_blank" rel="noopener">www.jenkov.com），而80端口就是Web服务端口。</a></p><p>Socket socket = new Socket(“78.46.84.171”, 80);</p><p>我们也可以像如下示例中使用域名代替IP地址：</p><p>Socket socket = new Socket(“jenkov.com”, 80);</p><p><strong>Socket**</strong>发送数据**</p><p>要通过Socket发送数据，我们需要获取Socket的输出流（<a href="http://tutorials.jenkov.com/java-io/outputstream.html" target="_blank" rel="noopener">OutputStream</a>），示例代码如下：</p><p>Socket socket = new Socket(“jenkov.com”, 80);<br>OutputStream out = socket.getOutputStream();<br>out.write(“some data”.getBytes());<br>out.flush();<br>out.close();<br>socket.close();</p><p>代码非常简单，但是想要通过网络将数据发送到服务器端，一定不要忘记调用flush()方法。操作系统底层的TCP/IP实现会先将数据放入一个更大的数据缓存块中，而缓存块的大小是与TCP/IP的数据包大小相适应的。（译者注：调用flush()方法只是将数据写入操作系统缓存中，并不保证数据会立即发送）</p><p><strong>Socket**</strong>读取数据**</p><p>从Socket中读取数据，我们就需要获取Socket的输入流（<a href="http://tutorials.jenkov.com/java-io/inputstream.html" target="_blank" rel="noopener">InputStream</a>），代码如下：</p><p>Socket socket = new Socket(“jenkov.com”, 80);<br>InputStream in = socket.getInputStream();<br>int data = in.read();<br>//… read more data…<br>in.close();<br>socket.close();</p><p>代码也并不复杂，但需要注意的是，从Socket的输入流中读取数据并不能读取文件那样，一直调用read()方法直到返回-1为止，因为对Socket而言，只有当服务端关闭连接时，Socket的输入流才会返回-1，而是事实上服务器并不会不停地关闭连接。假设我们想要通过一个连接发送多个请求，那么在这种情况下关闭连接就显得非常愚蠢。</p><p>因此，从Socket的输入流中读取数据时我们必须要知道需要读取的字节数，这可以通过让服务器在数据中告知发送了多少字节来实现，也可以采用在数据末尾设置特殊字符标记的方式连实现。</p><p><strong>关闭**</strong>Socket**</p><p>当使用完Socket后我们必须将Socket关闭，断开与服务器之间的连接。关闭Socket只需要调用Socket.close()方法即可，代码如下：</p><p>Socket socket = new Socket(“jenkov.com”, 80); </p><p><strong>socket.close();</strong></p><p><a href="http://ifeve.com/java-socket/" target="_blank" rel="noopener">http://ifeve.com/java-socket/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;Java网络教程之Socket&quot;&gt;&lt;a href=&quot;#Java网络教程之Socket&quot; class=&quot;headerlink&quot; title=&quot;Java网络教程之Socket&quot;&gt;&lt;/a&gt;Java网络教程之Socket&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0225_net" scheme="https://30s.github.io/categories/02-code-language/022-java/0225-net/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="NET" scheme="https://30s.github.io/tags/NET/"/>
    
      <category term="Socket" scheme="https://30s.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>CGLIB(Code Generation Library)详解</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0221_java_base/dynamic_proxy/cglib/CGLIB(Code%20Generation%20Library)%E8%AF%A6%E8%A7%A3/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0221_java_base/dynamic_proxy/cglib/CGLIB(Code Generation Library)详解/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-07T14:42:00.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CGLIB-Code-Generation-Library-详解"><a href="#CGLIB-Code-Generation-Library-详解" class="headerlink" title="CGLIB(Code Generation Library)详解"></a>CGLIB(Code Generation Library)详解</h1><p><a href="http://blog.csdn.net/danchu/article/details/70238002" target="_blank" rel="noopener">http://blog.csdn.net/danchu/article/details/70238002</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CGLIB-Code-Generation-Library-详解&quot;&gt;&lt;a href=&quot;#CGLIB-Code-Generation-Library-详解&quot; class=&quot;headerlink&quot; title=&quot;CGLIB(Code Generation Librar
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0221_java_base" scheme="https://30s.github.io/categories/02-code-language/022-java/0221-java-base/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="Java Base" scheme="https://30s.github.io/tags/Java-Base/"/>
    
      <category term="CGLIB" scheme="https://30s.github.io/tags/CGLIB/"/>
    
  </entry>
  
  <entry>
    <title>TreeMap详细介绍(源码解析)和使用示例</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0223_set_utils/treemap/TreeMap%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D(%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90)%E5%92%8C%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0223_set_utils/treemap/TreeMap详细介绍(源码解析)和使用示例/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-07T14:56:59.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TreeMap详细介绍-源码解析-和使用示例"><a href="#TreeMap详细介绍-源码解析-和使用示例" class="headerlink" title="TreeMap详细介绍(源码解析)和使用示例"></a>TreeMap详细介绍(源码解析)和使用示例</h1><p><a href="http://www.cnblogs.com/skywang12345/p/3310928.html" target="_blank" rel="noopener">http://www.cnblogs.com/skywang12345/p/3310928.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TreeMap详细介绍-源码解析-和使用示例&quot;&gt;&lt;a href=&quot;#TreeMap详细介绍-源码解析-和使用示例&quot; class=&quot;headerlink&quot; title=&quot;TreeMap详细介绍(源码解析)和使用示例&quot;&gt;&lt;/a&gt;TreeMap详细介绍(源码解析)和使用
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0223_set_utils" scheme="https://30s.github.io/categories/02-code-language/022-java/0223-set-utils/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="Set Utils" scheme="https://30s.github.io/tags/Set-Utils/"/>
    
      <category term="TreeMap" scheme="https://30s.github.io/tags/TreeMap/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList详细介绍(源码解析)和使用示例</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0223_set_utils/linked_list/LinkedList%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D(%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90)%E5%92%8C%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0223_set_utils/linked_list/LinkedList详细介绍(源码解析)和使用示例/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-07T14:56:59.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LinkedList详细介绍-源码解析-和使用示例"><a href="#LinkedList详细介绍-源码解析-和使用示例" class="headerlink" title="LinkedList详细介绍(源码解析)和使用示例"></a>LinkedList详细介绍(源码解析)和使用示例</h1><p><a href="http://www.cnblogs.com/skywang12345/p/3308807.html" target="_blank" rel="noopener">http://www.cnblogs.com/skywang12345/p/3308807.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LinkedList详细介绍-源码解析-和使用示例&quot;&gt;&lt;a href=&quot;#LinkedList详细介绍-源码解析-和使用示例&quot; class=&quot;headerlink&quot; title=&quot;LinkedList详细介绍(源码解析)和使用示例&quot;&gt;&lt;/a&gt;LinkedList详
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0223_set_utils" scheme="https://30s.github.io/categories/02-code-language/022-java/0223-set-utils/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="Set Utils" scheme="https://30s.github.io/tags/Set-Utils/"/>
    
      <category term="LinkedList" scheme="https://30s.github.io/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>AbstractQueuedSynchronizer源码解读</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0221_java_base/abstract_queued_synchronizer/AbstractQueuedSynchronizer%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0221_java_base/abstract_queued_synchronizer/AbstractQueuedSynchronizer源码解读/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-07T14:40:42.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AbstractQueuedSynchronizer源码解读"><a href="#AbstractQueuedSynchronizer源码解读" class="headerlink" title="AbstractQueuedSynchronizer源码解读"></a>AbstractQueuedSynchronizer源码解读</h1><p><a href="https://www.cnblogs.com/micrari/p/6937995.html" target="_blank" rel="noopener">https://www.cnblogs.com/micrari/p/6937995.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AbstractQueuedSynchronizer源码解读&quot;&gt;&lt;a href=&quot;#AbstractQueuedSynchronizer源码解读&quot; class=&quot;headerlink&quot; title=&quot;AbstractQueuedSynchronizer源码解读&quot;&gt;
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0221_java_base" scheme="https://30s.github.io/categories/02-code-language/022-java/0221-java-base/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="Java Base" scheme="https://30s.github.io/tags/Java-Base/"/>
    
      <category term="Abstract Queued Synchronizer" scheme="https://30s.github.io/tags/Abstract-Queued-Synchronizer/"/>
    
  </entry>
  
  <entry>
    <title>Linux写时拷贝技术(copy-on-write)</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0221_java_base/copy_on_write/Linux%E5%86%99%E6%97%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF(copy-on-write)/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0221_java_base/copy_on_write/Linux写时拷贝技术(copy-on-write)/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-07T14:41:36.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux写时拷贝技术-copy-on-write"><a href="#Linux写时拷贝技术-copy-on-write" class="headerlink" title="Linux写时拷贝技术(copy-on-write)"></a>Linux写时拷贝技术(copy-on-write)</h1><p><a href="https://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html" target="_blank" rel="noopener">https://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux写时拷贝技术-copy-on-write&quot;&gt;&lt;a href=&quot;#Linux写时拷贝技术-copy-on-write&quot; class=&quot;headerlink&quot; title=&quot;Linux写时拷贝技术(copy-on-write)&quot;&gt;&lt;/a&gt;Linux写时拷贝技
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0221_java_base" scheme="https://30s.github.io/categories/02-code-language/022-java/0221-java-base/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="Java Base" scheme="https://30s.github.io/tags/Java-Base/"/>
    
      <category term="Copy on Write" scheme="https://30s.github.io/tags/Copy-on-Write/"/>
    
  </entry>
  
  <entry>
    <title>浅谈CAS(Compare and Swap) 原理</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0221_java_base/compare_and_swap/%E6%B5%85%E8%B0%88CAS(Compare%20and%20Swap)%20%E5%8E%9F%E7%90%86/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0221_java_base/compare_and_swap/浅谈CAS(Compare and Swap) 原理/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-07T14:41:06.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈CAS-Compare-and-Swap-原理"><a href="#浅谈CAS-Compare-and-Swap-原理" class="headerlink" title="浅谈CAS(Compare and Swap) 原理"></a>浅谈CAS(Compare and Swap) 原理</h1><p><a href="https://www.cnblogs.com/Leo_wl/p/6899716.html" target="_blank" rel="noopener">https://www.cnblogs.com/Leo_wl/p/6899716.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浅谈CAS-Compare-and-Swap-原理&quot;&gt;&lt;a href=&quot;#浅谈CAS-Compare-and-Swap-原理&quot; class=&quot;headerlink&quot; title=&quot;浅谈CAS(Compare and Swap) 原理&quot;&gt;&lt;/a&gt;浅谈CAS(Comp
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0221_java_base" scheme="https://30s.github.io/categories/02-code-language/022-java/0221-java-base/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="Java Base" scheme="https://30s.github.io/tags/Java-Base/"/>
    
      <category term="Compare and Swap" scheme="https://30s.github.io/tags/Compare-and-Swap/"/>
    
  </entry>
  
  <entry>
    <title>CGLIB(Code Generation Library)详解</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0222_jvm/class_loader/java%E4%B8%AD%E7%9A%84ClassLoader%E8%AF%A6%E8%A7%A3/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0222_jvm/class_loader/java中的ClassLoader详解/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-07T14:51:23.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java中的ClassLoader详解"><a href="#java中的ClassLoader详解" class="headerlink" title="java中的ClassLoader详解"></a>java中的ClassLoader详解</h1><p><a href="http://blog.csdn.net/briblue/article/details/54973413" target="_blank" rel="noopener">http://blog.csdn.net/briblue/article/details/54973413</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java中的ClassLoader详解&quot;&gt;&lt;a href=&quot;#java中的ClassLoader详解&quot; class=&quot;headerlink&quot; title=&quot;java中的ClassLoader详解&quot;&gt;&lt;/a&gt;java中的ClassLoader详解&lt;/h1&gt;&lt;p&gt;&lt;a
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0222_jvm" scheme="https://30s.github.io/categories/02-code-language/022-java/0222-jvm/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="Jvm" scheme="https://30s.github.io/tags/Jvm/"/>
    
      <category term="ClassLoader" scheme="https://30s.github.io/tags/ClassLoader/"/>
    
  </entry>
  
  <entry>
    <title>浅析java内存模型</title>
    <link href="https://30s.github.io/2010/09/01/02_code_language/022_java/0222_jvm/memory_model/%E6%B5%85%E6%9E%90java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://30s.github.io/2010/09/01/02_code_language/022_java/0222_jvm/memory_model/浅析java内存模型/</id>
    <published>2010-09-01T05:00:00.000Z</published>
    <updated>2018-03-07T14:51:23.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅析java内存模型"><a href="#浅析java内存模型" class="headerlink" title="浅析java内存模型"></a>浅析java内存模型</h1><p><a href="https://www.cnblogs.com/lewis0077/p/5143268.html" target="_blank" rel="noopener">https://www.cnblogs.com/lewis0077/p/5143268.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浅析java内存模型&quot;&gt;&lt;a href=&quot;#浅析java内存模型&quot; class=&quot;headerlink&quot; title=&quot;浅析java内存模型&quot;&gt;&lt;/a&gt;浅析java内存模型&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lewis
      
    
    </summary>
    
      <category term="02_code_language" scheme="https://30s.github.io/categories/02-code-language/"/>
    
      <category term="022_java" scheme="https://30s.github.io/categories/02-code-language/022-java/"/>
    
      <category term="0222_jvm" scheme="https://30s.github.io/categories/02-code-language/022-java/0222-jvm/"/>
    
    
      <category term="Code Language" scheme="https://30s.github.io/tags/Code-Language/"/>
    
      <category term="Java" scheme="https://30s.github.io/tags/Java/"/>
    
      <category term="Jvm" scheme="https://30s.github.io/tags/Jvm/"/>
    
      <category term="Memory Model" scheme="https://30s.github.io/tags/Memory-Model/"/>
    
  </entry>
  
</feed>
